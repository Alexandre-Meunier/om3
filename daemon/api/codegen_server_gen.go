// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /instances/backlogs)
	GetInstancesBacklogs(ctx echo.Context, params GetInstancesBacklogsParams) error

	// (GET /instances/logs)
	GetInstancesLogs(ctx echo.Context, params GetInstancesLogsParams) error

	// (POST /namespaces/{namespace}/cfg/{name}/delete)
	PostCfgActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/sec/{name}/delete)
	PostSecActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/abort)
	PostSvcActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/delete)
	PostSvcActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/freeze)
	PostSvcActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/giveback)
	PostSvcActionGiveback(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/provision)
	PostSvcActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/purge)
	PostSvcActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/start)
	PostSvcActionStart(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/stop)
	PostSvcActionStop(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/switch)
	PostSvcActionSwitch(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unfreeze)
	PostSvcActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unprovision)
	PostSvcActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/usr/{name}/delete)
	PostUsrActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/abort)
	PostVolActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/delete)
	PostVolActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/freeze)
	PostVolActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/provision)
	PostVolActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/purge)
	PostVolActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unfreeze)
	PostVolActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unprovision)
	PostVolActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetObjectConfigParams) error

	// (GET /namespaces/{namespace}/{kind}/{name}/file)
	GetObjectFile(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/instance/backlogs)
	GetInstanceBacklogs(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetInstanceBacklogsParams) error

	// (POST /namespaces/{namespace}/{kind}/{name}/instance/clear)
	PostInstanceClear(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/instance/logs)
	GetInstanceLogs(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetInstanceLogsParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (POST /node/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetInstancesBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesBacklogs(ctx, params)
	return err
}

// GetInstancesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesLogs(ctx, params)
	return err
}

// PostCfgActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCfgActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCfgActionDelete(ctx, namespace, name)
	return err
}

// PostSecActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionAbort(ctx, namespace, name)
	return err
}

// PostSvcActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionFreeze(ctx, namespace, name)
	return err
}

// PostSvcActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionGiveback(ctx, namespace, name)
	return err
}

// PostSvcActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionProvision(ctx, namespace, name)
	return err
}

// PostSvcActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionPurge(ctx, namespace, name)
	return err
}

// PostSvcActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStart(ctx, namespace, name)
	return err
}

// PostSvcActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStop(ctx, namespace, name)
	return err
}

// PostSvcActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionSwitch(ctx, namespace, name)
	return err
}

// PostSvcActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnfreeze(ctx, namespace, name)
	return err
}

// PostSvcActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnprovision(ctx, namespace, name)
	return err
}

// PostUsrActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsrActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsrActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionAbort(ctx, namespace, name)
	return err
}

// PostVolActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionFreeze(ctx, namespace, name)
	return err
}

// PostVolActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionProvision(ctx, namespace, name)
	return err
}

// PostVolActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionPurge(ctx, namespace, name)
	return err
}

// PostVolActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnfreeze(ctx, namespace, name)
	return err
}

// PostVolActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnprovision(ctx, namespace, name)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, namespace, kind, name)
	return err
}

// GetInstanceBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceBacklogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceBacklogs(ctx, namespace, kind, name, params)
	return err
}

// PostInstanceClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceClear(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceClear(ctx, namespace, kind, name)
	return err
}

// GetInstanceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceLogs(ctx, namespace, kind, name, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/instances/backlogs", wrapper.GetInstancesBacklogs)
	router.GET(baseURL+"/instances/logs", wrapper.GetInstancesLogs)
	router.POST(baseURL+"/namespaces/:namespace/cfg/:name/delete", wrapper.PostCfgActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/sec/:name/delete", wrapper.PostSecActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/abort", wrapper.PostSvcActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/delete", wrapper.PostSvcActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/freeze", wrapper.PostSvcActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/giveback", wrapper.PostSvcActionGiveback)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/provision", wrapper.PostSvcActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/purge", wrapper.PostSvcActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/start", wrapper.PostSvcActionStart)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/stop", wrapper.PostSvcActionStop)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/switch", wrapper.PostSvcActionSwitch)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unfreeze", wrapper.PostSvcActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unprovision", wrapper.PostSvcActionUnprovision)
	router.POST(baseURL+"/namespaces/:namespace/usr/:name/delete", wrapper.PostUsrActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/abort", wrapper.PostVolActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/delete", wrapper.PostVolActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/freeze", wrapper.PostVolActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/provision", wrapper.PostVolActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/purge", wrapper.PostVolActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unfreeze", wrapper.PostVolActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unprovision", wrapper.PostVolActionUnprovision)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name", wrapper.GetObject)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/instance/backlogs", wrapper.GetInstanceBacklogs)
	router.POST(baseURL+"/namespaces/:namespace/:kind/:name/instance/clear", wrapper.PostInstanceClear)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/instance/logs", wrapper.GetInstanceLogs)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.POST(baseURL+"/node/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/y0EOtpDBwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

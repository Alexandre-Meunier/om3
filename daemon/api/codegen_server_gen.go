// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network)
	GetNetwork(ctx echo.Context, params GetNetworkParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resource)
	GetResource(ctx echo.Context, params GetResourceParams) error

	// (GET /resource/config)
	GetResourceConfig(ctx echo.Context, params GetResourceConfigParams) error

	// (GET /resource/monitor)
	GetResourceMonitor(ctx echo.Context, params GetResourceMonitorParams) error

	// (GET /resource/status)
	GetResourceStatus(ctx echo.Context, params GetResourceStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetwork(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetwork(ctx, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, params)
	return err
}

// GetResourceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceConfig(ctx, params)
	return err
}

// GetResourceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceMonitor(ctx, params)
	return err
}

// GetResourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceStatus(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network", wrapper.GetNetwork)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resource", wrapper.GetResource)
	router.GET(baseURL+"/resource/config", wrapper.GetResourceConfig)
	router.GET(baseURL+"/resource/monitor", wrapper.GetResourceMonitor)
	router.GET(baseURL+"/resource/status", wrapper.GetResourceStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (POST /namespaces/{namespace}/cfg/{name}/delete)
	PostCfgActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/sec/{name}/delete)
	PostSecActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/abort)
	PostSvcActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/delete)
	PostSvcActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/freeze)
	PostSvcActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/giveback)
	PostSvcActionGiveback(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/provision)
	PostSvcActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/purge)
	PostSvcActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/start)
	PostSvcActionStart(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/stop)
	PostSvcActionStop(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/switch)
	PostSvcActionSwitch(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unfreeze)
	PostSvcActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unprovision)
	PostSvcActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/usr/{name}/delete)
	PostUsrActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/abort)
	PostVolActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/delete)
	PostVolActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/freeze)
	PostVolActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/provision)
	PostVolActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/purge)
	PostVolActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unfreeze)
	PostVolActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unprovision)
	PostVolActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// PostCfgActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCfgActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCfgActionDelete(ctx, namespace, name)
	return err
}

// PostSecActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionAbort(ctx, namespace, name)
	return err
}

// PostSvcActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionFreeze(ctx, namespace, name)
	return err
}

// PostSvcActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionGiveback(ctx, namespace, name)
	return err
}

// PostSvcActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionProvision(ctx, namespace, name)
	return err
}

// PostSvcActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionPurge(ctx, namespace, name)
	return err
}

// PostSvcActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStart(ctx, namespace, name)
	return err
}

// PostSvcActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStop(ctx, namespace, name)
	return err
}

// PostSvcActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionSwitch(ctx, namespace, name)
	return err
}

// PostSvcActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnfreeze(ctx, namespace, name)
	return err
}

// PostSvcActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnprovision(ctx, namespace, name)
	return err
}

// PostUsrActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsrActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsrActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionAbort(ctx, namespace, name)
	return err
}

// PostVolActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionFreeze(ctx, namespace, name)
	return err
}

// PostVolActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionProvision(ctx, namespace, name)
	return err
}

// PostVolActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionPurge(ctx, namespace, name)
	return err
}

// PostVolActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnfreeze(ctx, namespace, name)
	return err
}

// PostVolActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnprovision(ctx, namespace, name)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.POST(baseURL+"/namespaces/:namespace/cfg/:name/delete", wrapper.PostCfgActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/sec/:name/delete", wrapper.PostSecActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/abort", wrapper.PostSvcActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/delete", wrapper.PostSvcActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/freeze", wrapper.PostSvcActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/giveback", wrapper.PostSvcActionGiveback)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/provision", wrapper.PostSvcActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/purge", wrapper.PostSvcActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/start", wrapper.PostSvcActionStart)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/stop", wrapper.PostSvcActionStop)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/switch", wrapper.PostSvcActionSwitch)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unfreeze", wrapper.PostSvcActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unprovision", wrapper.PostSvcActionUnprovision)
	router.POST(baseURL+"/namespaces/:namespace/usr/:name/delete", wrapper.PostUsrActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/abort", wrapper.PostVolActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/delete", wrapper.PostVolActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/freeze", wrapper.PostVolActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/provision", wrapper.PostVolActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/purge", wrapper.PostVolActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unfreeze", wrapper.PostVolActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unprovision", wrapper.PostVolActionUnprovision)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name", wrapper.GetObject)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bXPbtrLwX8HoPDNtz8hynKQ9rZ/phzRpT3Nu4uTG6bkzN854IHIloaEAFgBlux3/",
	"9zt4I0ES4IskOzmJPiUWgcVid7HYXSwWf00Sts4ZBSrF5PSvSY45XoMErv969uanZ08ZXZDlGV6D+iUF",
	"kXCSS8Lo5HQiV4AWRZahHMsVYgukfyAZICJQCmmRQIoWnK31B6pgTCdE9fyjAH4zmU70b6cT+4nDHwXh",
	"kE5OJS9gOhHJCtZYjStvctVOSE7ocnJ7O508Kzg2aDSxWuNrlLqv4fG8z9UYcI3XeaY+fysm08CQP2+A",
	"yl9IJoG3R82IkIoEoBopIqhW4dHLj9XYRMJatIGalgiucw5CEEZP0bsPhKbv300zPIfsxw3OCnj/9ws1",
	"kwr/V/PfIZHnEstC/JanWEI6VSz6ccFYe2blD5hzfKNn+oKsiQzNcU0k0riihBVURiao24VpezKdLBhf",
	"Yzk5nRAqv3tc4UOohCVwgwBb9hE6Y8t9kRmjAKE9AtepPZvNatQWJP3xB/w9PHgM3x3Nk5OHR48fwXdH",
	"3z9KT44WcPIg/fbRd48A/2MQ5dVCEzlO4JVGDmdtbKlr0rGY3PeuFXTG0q5RWApIQAaJZD5hZrFRWQqR",
	"5UQfTvGfP0JxElxVRlhfY7lqI8H0N61eIsPaT2M0R+dQI2bcO3RFgXR+Mr2C+d+DBFD4xPmwNV5b4SHi",
	"683jhUCSIQE0VYtQoAXjHaiIThpFVmSd8Xe01t5Ahm+eZoWQwJ+n4e0tMZ8RSVG5U7qdTmRMqg+M6j+5",
	"AhchhAVzSdKeRalxUiuTRndcar/uhJAD0ocOSeOiyUGwgiej1ITrExHQhfjbyZTkQfl8wzLokE+cE8RZ",
	"FtOK9lNA8v4fh8XkdPK348oUOjbNxLEaMyg753bKceo4okTw8T53MUDt9mphvlaGmUabVkvcglJtRupA",
	"1bMP7BZGWbn1DIHt9qjhA9yqxiJnVBhBePjggfonYVQC1fYKzvOMJNq2O/5dGOuwgtfF6deczTNYm1Hq",
	"nHz1X0oEHt/PYD/hFL2BPwoQ0ox6ch+j/kZxIVeMkz8hNcM++iiT/f4+RrUjordkDaywI/9wHyMrZyoj",
	"iR7y2/uRp+dUAqc4Q+fAN8DRz5wzbsa/FxarYUkC6DeKN5hkeK4U6q1b5XoZP+FzIjmWjBuXRTuinOXA",
	"JTELXZS/d2Fhe99OJwXPwgqq0jXvdKOpA/2+1PHG9FBQnhRy9ZZ9ANpGCK5zBeYSa8KVHo1ytY4k0Xqz",
	"bX84UN1oeaBdnxBy1m5po5Zoh72PVra78e4VPG2/D+ukzBPVxSIzrNOrEvNhzLTdHE8bRLKTnDq3w6LS",
	"yc76lCs+tFqcWVLEvr8q5x1rUclxq8Wzs/M3kDCeBjiXYSECAjJVcoWDH5yV2BY26a+A0rV2ZOkTQrv3",
	"60ZTi5gBapEJEfjZ2fn/MgqDjauKFC0La6pjT0+yjCVllGf3FUjSWtui0OZ4q9maUMbD1MsZl6EvDfLp",
	"Zg7QtL6kSRomXhlra8/Vsb/EfH4jIWgj+0jE+YRhHSJpwjJrk/YxTgN4WjZXEkrFsF7Pzs5V+9V8WPNf",
	"56q1svGBwkDEXrjWipeMksEzemkbK0KyQhIKIiwGqltaZEMROi+bt/VYVroBioSaMN58qwl4KPnjx/n7",
	"1OcmzrJXi8npu0HYFnNxIySsne59X8JUzNsftF/nbRlcs9T8Z5gGsXBe2h2pqUSE5IDX4+Gd635Bx8/n",
	"ngM/tWjHmWFRDE437OUrQMqtXc3RGoTAS0CFgBTNb3QAAMF1ArlEVyug6K1qSwTKsUxW6icOiEj1i4Jk",
	"fv2jgAJQBnSp/bD2ThLEBJcBELvRRqIqoRmsAHM5ByzLCeg5+bPo1WG20dpr20Vky7ddRXQ6RkoU8Ud2",
	"eQ1KFbxvIa5/b8kIEZeKioo8lTKaM5YBplo5YiFHbIMNCnvQK1D9NH5r2V5HNSwMqzkyKwVZe6Ibox4u",
	"v/D2gj0popfVJrEniOf+BrEvmBHnKKk8gQEGtTEnnQHQj1B7y7JwSjBxVpWTeZKBsZsa2s/ohaABK2AD",
	"nMibflvVQfH6DEApRk2sUB27YzQmGtiJjMNSaJSHmqsJByy3MnHb1JRYDjD77eRr6Nbw0AM4cCEq6zNS",
	"tUSD4WIduiubqA0KIxe/FUJNqDJxCcU6Xtqay3MqJKYJbOv6uv6V7zvQSHQdPTNxmC/rOnrObItwDaza",
	"cpnnQc4mK0g+iGId+UiylJuoQynOPQcj00nK8/BOA3QTBLDI4Ppyja/DxrL5SmjHV4n5EmS4gWXOJU6c",
	"Ixi0XaKeMOPJCoTkdgF08emV11Q5e5i7vIjhxMvt6WKrYZ7hBNZA5WXOMpLc9MbUXPvXprn2PlkWhs3h",
	"cgCdck5YQ6d6hHZHM0bc0pSYk43XNTHsPCyxAKqF1ZJykbAcxhFUkD+hpv9iaQPTiSjmAmR/nNA089Bk",
	"OcvYspclb1272+mkMHkV2xteakF7y9dbrGYFmuXmLS5vJdWXTWuNBAVi6p/5+Yti6s5mnLwHZNWTHV9Q",
	"HEMr0nvErNGotVdMJ9dHS3ZUMtFov9lTF9grvx6RtYu6mLU1WRK5KuazhK2PWQ5UbJJjtn50nDAOxw6Q",
	"JrfTqc8lrONRlSGae2KP4oISu4bhgF6qtk1RsAd4Gk5HfM2fznALpUaEwPpy392m3XA+xg4hOkjVdD10",
	"c9u6a8Ivcb6tTvIZGIdvGVifOq2Hgb0dpRn/jcyvlHQNqXOClQHSsGi8DbzVe5mxOc4u4ToPo9Noccm0",
	"JSb6YV2OV25T5Uiu8GUGOAUeNh+I6PuccxDAN5BGPF2WdM/Xb7DVJOo68xKuISnGwqh0qwIRMcgbjcRl",
	"aiPn7Vl7ZkiLbXvbsz2btr1pm5SOy5G+hf2yFR923l3ra6NDvmOLxBfXhnA3BDEudgFZiHG+RmVH0wAF",
	"O0W0sYbqO3UNSLXVlxpm6A79sgxI73OLjrrjG0yy4Qe/CaOKtKS+XrzFlMRcpQVnfwIdq/FqCiuFBS4y",
	"OTld4ExA8yDcNdVhWV4AIgskV0Qg40OiFRaIMonmABRZZqG0ACQZwhe0iqam7IoqlFDCNsBNMBWjtZo0",
	"UEVLlAMnLJ1dUB0dlisIfEVAUzE1aWMGAbFiRZaiOaCCJitMl5BOLyimKSpRvyJZphoIkAotPc+ZTj6O",
	"hCWFxHy0/vRSqoZxXdEBZyM65JxtiFpthnE9qQ1l030q3AqZtlIvKLXR3hFuUoIzCDt2u7sqehHWV5dd",
	"Sv7CafPcY2bFpZaW8rlR11mOEm56W7kUltJ3oa92dywqMdjZi+hzH16wZXdgzjbYMix3BvKK8Q+Bk3rO",
	"GR8ZRVlwiAhzNM5Dq/HbhoiNIQxOh5hOClGzQmMn/fVECYeD6m5C0noiFprFI8QbS7znecADy/um2yUx",
	"JWDHHu+orx0fisWuOBnizuVVPo7LjdfGjEO1c+LjnNqKXgHhKT/u4NI28NqfT9tiSNvv3EbCt0nrGcKX",
	"bbjSwZM9cGTf/Aieyw87SVB9R58iqE6jTxBUp67TAw+Ttv6NRO09m/ByyXECl8YyrBsJ1U25tlYAnN6M",
	"7/Q7I3S7AUWeERkPcDcTKXX4NDrLBv5hzBpj9pgcSvntHMHUGtTdz3pOF6zNUX0bLXQVQv/u8j7cDq7T",
	"RcwnfStj0GJjKbxQXUJrmUavp5RXUywK+v/2copGw+SmaOwMrtq90FeKMNc3Wghd6iujs5AA5OErSgZA",
	"aNqSISEZx0tAGn0kMDXjDSbF+ZMzfWOsLxnIMqUWZjf4xtTO9tajy8DdKSStFdEO4Wg3hREq3E06tEGU",
	"EhfdENvXIEueq45a2oJio+9ttiHon+sg9E+z/rQkw14DN0abXfa6krT73ehGBbpDqVhRwLEA9tgY9TbB",
	"wrsPC+87pPuZR1Q/Znh0eIBA79Y7RzNr23U0irm0V2xabME5Cf9e3onZOtLUulYTMhxVPyzDUrpFSHRp",
	"jqpi6AacaSIuRQ74Q+xUqLJ1WrivCb3UoanLNawjySNlE3GF8wH+vOGU4UudCyWt6iGvpT6wr6PSGrc2",
	"zXJOQ+Rz1+BVTTyFMyeHb0KqQ2C3Nldg+u4rtDmm5WY7/aOBOhChfcjg9AyHtriRxwh3mtBkpCe46l2o",
	"cfCx9kuc75bjND50voc0phJEudENgnAuXWJWPA+qK8Fp+6j/3aYtbZd+dFkKy6WpxTIg9j8szD8k48gK",
	"sS+yzayiKt4fSidqyEAtwah+IOBSjGqJRa3Zd+/8pXr4hWSw9QWre1Fg23uFngLc1Tc0oHbxDqvJDHd7",
	"PAJE95wdvCofpf35VR6pWmiNzBSKgy9rswxXQK/qe0J5OD2hTOcWFms18grriIWxpbmPQgX5lW+S/3cB",
	"BQQur4ZcpJ6blk0iNCGEyNHcThoz065CuJSM64hKHeRokGEhkZm+clZwivDG3S0WiHGT82GBC2VW6bgg",
	"B6zV04oswnRrbFzRIjclZk4VOsRYLslan51SRo+8v44V1wqawiI8sN0fGzFtnOM5yUhrzfSK0i4neAP2",
	"v5Ui5KjbzWM2174DvgEwNiwr1hDfZjtPWVZGTGrUb4AcfEyoGDtOpWpRCLBH/b6DKq0Q2Z8iVTD/rcnS",
	"nQc5XAaJuGQ8X2EaS6yLperH7MvBcte6D86y6lTUS/SuMOzhuiHMeN5bgkYkwHzdUQ581PYpDULaC39s",
	"KZ4yKnlIqWWwgay+CxDls1ZKNIV5sdSGqv75CnNdLFGXQZlOFlhiwxpKEqfl3/dtVWbUbrTPi/mTJFy7",
	"oDrBcki63UdIlgdVuijmgYMPcwPPKwSWKVZ6BxtVZa3V/G8nM349qDBazSlwtwc0BrEpn7EUqgoGrqRP",
	"4HKdK+hwObAWw3alD+rjdFipCncby8gAB+LXER3RXN+qVTf815wtOQgRvN+bYy4JzkaqqXoUuZeUA+8A",
	"uvKB7XhrbIK6Zt3L6i5n8HpqLNbtPkf3+rVYjr30Fb6xaqZSG89A92DFpni+ScxiPr8iMlkF/DMQktCy",
	"Vkl8j1oTarX4Sc/K80EG8bJFlwK4SBvtqmuLJ2hVrDE9UoYrnmeA4DrPsBkBiRwSsiAJksykpbIkKTgH",
	"mrgT3AuamxFrGZ91+SoCSurtCtCvb9++dnmmCUsBff3uzS9P//Hw0cn7KToHTVr03TdoCRS4znyd35gx",
	"GSdLQpEw1asWjEewQyHkfDuQyAxCNBErxuW0SRpRrNeY3zSA6wvsM4SeS3T+66vfXjy7oGev3iKTLWsq",
	"HXuISRZHc2oLOFxQNaW84DkTytlYIH1aQv40XPkaZsvZFBWC0KXqqrTxBpAt2nVBKSyZJLrt/0cCAAXI",
	"+mj2+Jsgy1ryJk38R7iYs6FZRPb8UFqz8qEu+TVFLkaDGEdlsUgvuNN0eGze9JpcazNYuzmSFxDaELuV",
	"Dk5T3qlu7lEb7SMBV01nOkaR9YbDfPo5A3BYSUyf8AG70v8uonf+Rw2j8Ytc+xeR2dkyo1tmdrWvsg7M",
	"7grcpxmW4dXMC7/tmFXs3IWIy5QIpb/S6BUrO4+OFmrNpvOb8HcOxlSN3SBWHy9TXXh2WFZXuxxJOYUG",
	"vjXkKkyaww5NC28Qcz/p4Q7o9kHcUnJ3DeGWkrhDENefjhihITwiBDWE+b6D31lHbH9eZ4kaW47G5QVb",
	"/kwlv+mcsmsTd2QDzI5VSQl6pVWHrgnu68rrwNzwZplGTrrpH80n8vTPCDX8xvZqouWgjdUZ+70DF0E2",
	"kPY5qtCTmuoaE1ovHBULUVVtu8tAOWRLCzCW8zLqqMzzTgcfy7aKsRlbMn6+1thi2+rZbDyBAlaESmFL",
	"qlsrliwp4yAQzjJjxSLJMRU66wWZmIkIXosDmphElPoQhKYkwRLUMFg2xhJohWmalV4R0kBEkWlPSaes",
	"CHtVz+CVIgtjdZMrY1wwjrR2iNzVIzYvpI7TB7g5MjmSOSZcGMs9VZ6IEiKu3VP1f8NgNXHJkK1oeKFo",
	"AUdXJAWE56yQxm1zc/LxqBiUufzPQAbfcoQabthrjdJ0kGWGmTZ6RhaISHf7UXKyXAJHGFkAlpnIXaW8",
	"oD5fKJOoyCNUZdHa8B4lnFeMl0sOS81QQiVDr8zpufahAKfKM3yywSSrnCrTcXZBdUlngQhFbsQKesro",
	"VxIJyXKEY4IaQX9EukRMKfQZjJ6pGXtawLAFZ1f4Rui7qflUv7GD8EJqPum5jZvZ2HLSprhJ5DUGL8Xd",
	"tKtLur5NJwRZKn9Xhp/fwcuRh2vDbvs4feaUThkDN+vMrCq/wqh3WbN1J7MMUDv7u4wSWOrYecSqNNZ3",
	"VEednfPbyvck3AsRflQdpyZ1ZZ7h5ENGhHQ/LHV4Wp/NmUvVk+nkd6Y/ZYA3+lUCxvR8/yiwlLVCqxVb",
	"3NWAtg1LiSR4gLtoITwv22txcLljA3q+NY1bhm4JsIQX2hFbwwf2JfvJ5cmvmJBIKLXurlIgoGnOCJUz",
	"IzeDM/cxumI8S/UeUVDyh95oPHiIpEAlWRDg9ReXyB909vDBg8dHJw+UVMyKeUFlcfrg5BS+m6eP8aP5",
	"t98+HlGs1JZPNTurHVtH+uqjikSQoAMbo+vbkpONAfXvbsjGBZVPgrQ/HJ2caNLaBTcTfHOawuYhPZlZ",
	"fGdmFrOT8YTG+yR1qcvdqi+UpkvZFa1O+/yECaW50vkN0s3Mf3Xj4ALXqi0Wbsmx2qEheGzTOlSxTQdf",
	"WvdH3o+bUS97NtS7rSES2IreesmL1RnsApOMbUyV0FDOi5fL59jmdVlkcB0+hBWQFJzIm3OFneHCHAuS",
	"PCmMGtZYa0aoXysJWkmpE2XngDlw19r89YvzT/71P2/dazwahP7ahHHrmcv2TGFi6W4scWRSxzfAhZny",
	"o9kPsxNjDwLV+f6TR7MHswcT7z7bMS7k6rh8ISJnJjKipE1b1s/Tyak+iKrepJjWHmuMFJetmhyb55Nu",
	"p6HnEvXA5aOJU7TG12RdrM11KPTw8Wq7dxRPHqwDi/j9Hb7iU5Gn4x2fkxiUEq1j1ah6Bqev7SPvPZfu",
	"tqpR9fZKX9tHNZnXTPak/d17xUxfot+9V8Q15uS7iRKpyXsF4dieFRzjudMdUQGzZYLNaeeTOXMR1rvh",
	"Vyi1sO8Fpj5uPLhLLtsnivrafu89KtTX9odx0rODRLjSzQ2h0Kw+XnAAk900UDh+MR0O0vElSEdBR8vH",
	"b67LQUI+Swkx4bPjlIrjtFjrmGbQ23lWrHPkv6X57Owc/clomcZgkhPq0vRPkOWTIwrAXQqRe7foEzYZ",
	"dmCardJv3pepcU4/VS2ifDMPLbgoqWncxamfN6568Ci7tHzIO/aGhtfWvEs9oKH/VPcAg1PCtTTkOBLl",
	"EyLDhKcqeP9Zi09NcHSozNsIms8rLokwsVnVEHH73KJkCKcpwojCVe1ZGbSG9Rz47IK+XQFSZitQqU9D",
	"UpRkRPlU1pcWCEuUARYSLTmmEn3FGZNfIcbRV/9ihH41u6AX9DVnCQidMmUDszU8iECp0j5Y3NBkxRll",
	"hchu0PzGivoUKU8PORKq9kInW5XVFGvgVliYmo15Mc+IWEGKrohcmYISp3qCP14UDx48SnBO1F/6D1CI",
	"vmVowbKMXaG8E+UpumEFWuGNzim70u/5mI6qg1mZpxf0CCkanBeJAjWNDTzFaQqp/VL9jL7W0Wy4Miwp",
	"Z6Vb64Mdj2PiGzfac3PeFB9NzePI+xod8QoLhDNdkwfVnx0qB9MHHdsNhSnSKd8mI0+5uop0JkeqLowZ",
	"EfKbgJ6rMrv/ZSLFDTXXTnp0FWiU1DcJ2P2K+pA3xSlcudeRCH1h3nU6fTjY3f4iFJUJ5g/RVLqlr6o4",
	"rNkGGpK4H031Qo0VU1V1RHbXVXV4d6SsaoMM1laaDr3qyjAipLDqisq2C6sqPVSvrtLTiGkQPZo98g3o",
	"Jz1Cj4LqhL9PDfXCHmL1qiiFkRqm8crbrqqJpXB0JdmR4cn+VNS+1QNbiuPEu1oUdWzbN5EMJUDIn1h6",
	"s7+HlINjBSxLAdJZ5hlbIpf6VedO5L30bj388G4d4I+2F3iJCOHdwDbwUkM6VtgbP/v0QGFD4aputXUo",
	"I57im7Ks804+fevM7Uvxv6r8lW46l8kV4zzyM7wGkeMEXrl8kAEe9zmY12arPnd5zlOb35fEeJYP2ajO",
	"VbuDavIIV8yPq1u3veQrr+7e9S5fjRQQYpt5yMoYnCjm1V1fcdjugxyv1dCK6cfnXtWiccrxNZarMXrx",
	"jKVwPzqx9pBXQJx0ypFLHjXXoKZVlitNbULpp3JSci+SUybIvNdlH2JqofFaw91ohcDTEgEuKiSRzaIR",
	"Pjq9euBTPRK7b0YrJUGdiSOO/yr/f3ucLJbm79vjFDKQfcedi6XR3s9M47G6pBxZKZXX6vchGkX18jq8",
	"PxyvfibHq3ZVH6NkseyWUwHJGDk9h+Qgpwc53bucCkh65HRTyumA1LOyyIZLOztI6UFK9yClm+FSOkib",
	"bg7a9CCnH1dOhyTjlXJaJmoe5PQgp/crp0uygTlOPgyU1H+65gdZPcjqfctqeeV1oLCWl50P0nqQ1vuX",
	"1oIvhxoAr3Xbg5QepPS+pbSVctEhpec2oeIgpQcpvW8p7TtW94RUn6wfZPQgo/cso1Xh4QFSahp/PDm9",
	"m5yJ5vxu62UWOs4+D6vky1glw66plnLkXVE9aPSDrN63rI6NOPzm9ThI7EFi70ViC8HHnI79JvjhdOwg",
	"p3uX00LwbjndsGxErsG/WXbINThI6b6ldMOywVI6RJuWYnrQpgc5/UhyOsSjKuX0kGtwkNOPJKcDvalS",
	"VA/ntwdp/YjS2n9+W0nq4fz2IKUfRUqHxVNLQT3EUw+y+hFldawFcIinHiT23iX2rw+EprdWaLvuKL9y",
	"BeLvQzAVUp+sJGtCxC7EfgalHuxTAFZsQF4x/uGY5F3CcWZaPc/7qjz5b9RUZavmOPkANEV2sFjJJ/OS",
	"aKviyr2Uci9n+BkX13Tkr3FeDOC7+NzZ/uUwnaXgimynHJMe2+WMpWAjwrrxwYD4TAwIXV7PEwm1VDO2",
	"jJdnPgeuay4mQCVSLcO1mZXA/ORgjbUlXrClK6I8HVQZRdytJfCCLT9nxdAQgSQDzOP16p6qz8IUjRTo",
	"6wXjyJZgnKIFJhmk3yBiioCa2qW21It+K28WrG2nhEWD3a141BdSU6TJr5TP02OcZczIduc2zlJ49uan",
	"Z0+q1ndZLa0+UnT1fDyqVa+y91GsfBJrZJX5suuZsm7utjhdheYnvV/eJ7unPTbNvll7NwnIdUzfmFFC",
	"TK7e1DyUZhqrEAZYPRSuekyeF5+OubPD4xJflL0j+tT/FpVM7634npa5jsJ72gI7FN0L8v3YvafYyfzn",
	"5u3iO+WgGeSzX20m3rg3F9PEZw9O5n9erNkKQsvRbNtohseVb3g39pU/SoD8XR6vqd3e8HtrLq8wsVCh",
	"C1XrwroLW0hTzHYz1D43ceh1xiyftrPXTWf9cHr7NVrY4KzAMvYIhfe5ow58CypZ58AFo1iCeXragFFC",
	"gEXXoxdex48WEa8R+8tRSgtiHvPvlsFfVKtdJPDuOadR/HL4trP7Zqh2cOD+M9lfPmnevW4N8bcpvn4f",
	"S9aKxpfDNM6WHIQYYgO+dm3v2gwsBwpZgitMl2YvL0va14w984TbQpl6upWbobYBtfknvId+UEpS/bCX",
	"tiIhPdiDnnR0vxCLcJY5M9qZ3TbdYNal33d9eeHulUCf4v5CojU1icgZy443LCvW3eG614xl/7bNRmWq",
	"uAwVIRnHS0BqwE8xTaWa4Ge8v1smeLzvZfpnzO4vh9HFPCPJMcuB4px0cfz8Ci+XwPf0kJvVNJ82iR3J",
	"DJEsxThk+OZ4DULgZafT+kY1fGnbjd0AdeczloJeCgM8HN3hqdmMn6d3u2f6M/vsn2TrOs1usPiubOTa",
	"MLF3grA5d0qxxAIkWnC2RhhpaUUrwFzOAcvDO2LBd8Q4CFbwnnfE3pSN7vcdsQFrn6T3Yyw7EnSdfjpa",
	"Hk5AjaA5eihRu739vwAAAP//piMbnYX/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (POST /namespaces/{namespace}/cfg/{name}/delete)
	PostCfgActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/sec/{name}/delete)
	PostSecActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/abort)
	PostSvcActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/delete)
	PostSvcActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/freeze)
	PostSvcActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/giveback)
	PostSvcActionGiveback(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/provision)
	PostSvcActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/purge)
	PostSvcActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/start)
	PostSvcActionStart(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/stop)
	PostSvcActionStop(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/switch)
	PostSvcActionSwitch(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unfreeze)
	PostSvcActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unprovision)
	PostSvcActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/usr/{name}/delete)
	PostUsrActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/abort)
	PostVolActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/delete)
	PostVolActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/freeze)
	PostVolActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/provision)
	PostVolActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/purge)
	PostVolActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unfreeze)
	PostVolActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unprovision)
	PostVolActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// PostCfgActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCfgActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCfgActionDelete(ctx, namespace, name)
	return err
}

// PostSecActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionAbort(ctx, namespace, name)
	return err
}

// PostSvcActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionFreeze(ctx, namespace, name)
	return err
}

// PostSvcActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionGiveback(ctx, namespace, name)
	return err
}

// PostSvcActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionProvision(ctx, namespace, name)
	return err
}

// PostSvcActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionPurge(ctx, namespace, name)
	return err
}

// PostSvcActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStart(ctx, namespace, name)
	return err
}

// PostSvcActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStop(ctx, namespace, name)
	return err
}

// PostSvcActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionSwitch(ctx, namespace, name)
	return err
}

// PostSvcActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnfreeze(ctx, namespace, name)
	return err
}

// PostSvcActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnprovision(ctx, namespace, name)
	return err
}

// PostUsrActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsrActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsrActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionAbort(ctx, namespace, name)
	return err
}

// PostVolActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionFreeze(ctx, namespace, name)
	return err
}

// PostVolActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionProvision(ctx, namespace, name)
	return err
}

// PostVolActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionPurge(ctx, namespace, name)
	return err
}

// PostVolActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnfreeze(ctx, namespace, name)
	return err
}

// PostVolActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnprovision(ctx, namespace, name)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.POST(baseURL+"/namespaces/:namespace/cfg/:name/delete", wrapper.PostCfgActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/sec/:name/delete", wrapper.PostSecActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/abort", wrapper.PostSvcActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/delete", wrapper.PostSvcActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/freeze", wrapper.PostSvcActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/giveback", wrapper.PostSvcActionGiveback)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/provision", wrapper.PostSvcActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/purge", wrapper.PostSvcActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/start", wrapper.PostSvcActionStart)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/stop", wrapper.PostSvcActionStop)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/switch", wrapper.PostSvcActionSwitch)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unfreeze", wrapper.PostSvcActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unprovision", wrapper.PostSvcActionUnprovision)
	router.POST(baseURL+"/namespaces/:namespace/usr/:name/delete", wrapper.PostUsrActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/abort", wrapper.PostVolActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/delete", wrapper.PostVolActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/freeze", wrapper.PostVolActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/provision", wrapper.PostVolActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/purge", wrapper.PostVolActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unfreeze", wrapper.PostVolActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unprovision", wrapper.PostVolActionUnprovision)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name", wrapper.GetObject)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CJqjhxK1jx//JwAA//8qujaOyP4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

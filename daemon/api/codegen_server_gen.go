// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"5uW4jEt1fPT06MXk/vr+/wMAAP//Y3oBy9eGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

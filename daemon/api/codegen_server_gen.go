// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"H03eX7//vwAAAP//jTrTBzOSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

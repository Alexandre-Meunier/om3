// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(w http.ResponseWriter, r *http.Request, params PostAuthTokenParams)

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/events)
	GetDaemonEvents(w http.ResponseWriter, r *http.Request, params GetDaemonEventsParams)

	// (POST /daemon/join)
	PostDaemonJoin(w http.ResponseWriter, r *http.Request, params PostDaemonJoinParams)

	// (POST /daemon/leave)
	PostDaemonLeave(w http.ResponseWriter, r *http.Request, params PostDaemonLeaveParams)

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/status)
	GetDaemonStatus(w http.ResponseWriter, r *http.Request, params GetDaemonStatusParams)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (POST /daemon/sub/action)
	PostDaemonSubAction(w http.ResponseWriter, r *http.Request)

	// (POST /instance/status)
	PostInstanceStatus(w http.ResponseWriter, r *http.Request)

	// (GET /networks)
	GetNetworks(w http.ResponseWriter, r *http.Request, params GetNetworksParams)

	// (POST /node/clear)
	PostNodeClear(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/allocation)
	GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/config)
	GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params GetNodeDrbdConfigParams)

	// (POST /node/drbd/config)
	PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params PostNodeDrbdConfigParams)

	// (POST /node/monitor)
	PostNodeMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (POST /object/progress)
	PostObjectProgress(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/switchTo)
	PostObjectSwitchTo(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)

	// (GET /relay/message)
	GetRelayMessage(w http.ResponseWriter, r *http.Request, params GetRelayMessageParams)

	// (POST /relay/message)
	PostRelayMessage(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthToken(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonDNSDump operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonDNSDump(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonDNSDump(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonEvents operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonJoin operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonJoin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonJoin(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLeave operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLeave(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLeave(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLogsControl operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLogsControl(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLogsControl(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonStatus operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams

	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", r.URL.Query(), &params.Namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", r.URL.Query(), &params.Relatives)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relatives", Err: err})
		return
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonSubAction operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonSubAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonSubAction(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInstanceStatus operation middleware
func (siw *ServerInterfaceWrapper) PostInstanceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInstanceStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNetworks operation middleware
func (siw *ServerInterfaceWrapper) GetNetworks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNetworks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeClear operation middleware
func (siw *ServerInterfaceWrapper) PostNodeClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdAllocation operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdAllocation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostNodeMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectProgress operation middleware
func (siw *ServerInterfaceWrapper) PostObjectProgress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectProgress(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------

	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectSwitchTo operation middleware
func (siw *ServerInterfaceWrapper) PostObjectSwitchTo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectSwitchTo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) GetRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams

	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", r.URL.Query(), &params.Nodename)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodename", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", r.URL.Query(), &params.ClusterId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRelayMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) PostRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelayMessage(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/events", wrapper.GetDaemonEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/join", wrapper.PostDaemonJoin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/status", wrapper.GetDaemonStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/instance/status", wrapper.PostInstanceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/networks", wrapper.GetNetworks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/clear", wrapper.PostNodeClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/allocation", wrapper.GetNodeDrbdAllocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/config", wrapper.GetNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/drbd/config", wrapper.PostNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/monitor", wrapper.PostNodeMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/progress", wrapper.PostObjectProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/relay/message", wrapper.GetRelayMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/relay/message", wrapper.PostRelayMessage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9+28bN5P/CqHvgDYHRbbz6OF8KHBp0n71d0mci10ccLFhUMuRxGaX3JBc2eoH/+8H",
	"vna5u+RqZVu5Nskvbbx8zHBmOJwXqX9OMl6UnAFTcnL8z0mJBS5AgTB/fapAbF6JOXnJ2YIu3+IC9GcC",
	"MhO0VJSzyfFErQAtqjxHJVYrxBfIfKA5ICoRAVJlQNBC8MI0MD3HdEL1SDP9ZDox344nrknAp4oKIJNj",
	"JSqYTmS2ggJruGpT6n5SCcqWk9vbqUOwEtji0kWtwDeI+NY40KC5AQQ3uChz3fxcTqYpuD+vgalfaK5A",
	"9EHnVCpNDNCdNDl0rzgKdWODAFVQyP6ktieCm1KAlJSzY/ThI2Xk8sM0x3PIf1zjvILLf73Qy2kWcTr/",
	"HTJ1prCq5G8lwQrIVDPrxwXn/eXVH7AQeNMs9zUtqIottKAKGYRRxiumEqs0/eJUPppOFlwUWE2OJ5Sp",
	"H541SFGmYAmiwULLoCxxBqcGAZz3MWK+y4Cc+fatwmVp9w6rVR8QN21G7hOgXNPOIu04BjlkioskZOk7",
	"xKEHzTtj8B5yrOgaZJrOwndJgA/be/DmnOeAWRvg5mVeSQXihMTVTGabESWoVlte48icK93AmflTA98k",
	"EHPTXFEyGUmJzVtOgCXVH3Ot98LKTzIKJ56DTCsdXFIkeJ7aAK4pom7+RcBicjz520FzKhzYbvLAjEpq",
	"By+raXEZL6zp5d9qSZYlZ9Iu/8nhof5fxpkCZpQTLsucZkalH/wu7aHQzDe0vlLweQ6FhdJG/fS/Go1k",
	"t54mxLPPA/wnTNB7+FSBVHEsjj4HFr8xXKkVF/QPIHE0nv4JiPH887DkhCkQDOfoDMQaBPpZCCO4EXw+",
	"C1U0GjQD9BvDa0xzPDf7u4PNrd9YZue8qNTqnH8Eg0ApeAlCUbuplP/cNwx0yxXclFTAFTbrqQ9ubVY8",
	"VrSAqMHUnD8f3Pz92S4jBMRlGcXEqfA+8pmxVLfR0g23Zq2eTyvfkYP0UaCHOCTHDTqtVySNGTZymLXZ",
	"ehR0i3Ro16jUk8co2V5yQ9Nej7eOFKn203rdqR5n9RJ7PQiGgrMY2/LG1hkijJ3gZd1dz8nkuFGv3p7p",
	"/qv5uO6/znVvfaYCg5GIvfa9b6eTgjM6ekVvXGfNaV4pyiAkYG0G2z1MqnwsQmd1974Q5fWJq0loCBOs",
	"t1lAgFIIPyZlXfZojZfnp4vJ8YdR2FZzuZEKCi/4l/WcmnkPN9uv874MFpzYf4wyh/w8b5w6aJtFeisK",
	"wMXu852ZcVFDK+Sen37q0E4zw6EYXW7cnNUTaTNyNUcFSImXgCoJBM03xtJFcJNBqdD1Chg6132p1E5Q",
	"ttKfBCDtD0pj79qvnyqoAOXAlsYb6ilzFsUE1+a+03IJPzW2ghVgoeaAVb0As6ZwFVuPKdepCPoOEdnx",
	"7b4iOt1FSjTxdxzyDrQquOwhbr73ZESTUNMm4rdNJzmWdzUB/Lxuku10PXes7lgqUQFYzZHdHYbp282R",
	"Yc6+DvT/AymfN83B8EAznoWHwkPN6Zte5CBURH/YnRU1zySsQVC12ab06n5dpvjJg6nSLOouoocq1ivY",
	"VRV31h9R8dYMqwzK47bBdJIJwGqXAZTEKaywgniEIKSjW3kL1wYJM7ufK0pfJt9DxgWJWGw5ljKKGsEK",
	"Rxt8AKWvyFUeN3b8Bt+iqXFDuqlDzE7qkEks7X85g/FCUZMiIglEzMmLPOdZHYhuE2tnl8nzve5bVZTE",
	"uhWUWU3SJ17JhYq1dKhnuvmJpgGqBocY6SiTCrMMktvNOm1D1NRdtHun3dWtSsIfjZNsRXMirHM66Cpj",
	"tbIBTM7cRpVKYOqSHP2jLJNVEZdlUcZHAFtHByxyuLkq8E2cJbaVsoFWhcUSVKKD4H/Y1Y+ToY+UkW20",
	"Mn20OxsE7sZxg4tsBZquaqvrHHbVI9cgcL4DqBILn6Hahe9ljjMoXORlcGDdUY8SIEGswQWhF7jK1eR4",
	"gXMJ3cCL72rsXVEBogukVlQiizpaYYkYV2gOwFBlUy+IVIAURxhdsMZOJfyaaTaiTBPHmqkYFVpmgenN",
	"hkoQlJPZBTN2t7Zy+60IGJFTG3m2GMgVr3KC5oAqlq0wWwKZoguGGUE18tc0z3UPCUojZlY6MzmkvtyX",
	"gvIxJ3vdz4zhayopZ0BGBLnqrjbYyyuR7eCW+RE/35RcAqnN6p7KFhVjzrStJ96SCdPOL84h4ZfneA07",
	"S6jl0tVS8Coe6JLVXIKVfEwItXv0XUvdtpVvifXWgjwmvJHcS+sk8EOj52U7mG/QQgHoyBDFS57z5VZZ",
	"qfvdTiduk9zRr7DnSa0onQZsFE5bFhtosQV75dk/cq35bjOp/61924h51Gg8ytnVqMO8s5beDDEkGahr",
	"Lj6mTmIQggu5m4zTcvxua4E/KWPTJY0+N3YAp0hD5V2O0Vj9Zkbc3m4j3knZJx+N70nWjpA2DaVLE/ca",
	"RNSK7zCclk1E1yeOx7Bde6h341iUX33i9eiyEJDQgmUrMsyqYu60I/0jMaKSQEZYqQak6+2ms9Ci5OEE",
	"TtiC9zE3ZRKxzKn57sNWPo9qol22aabN4VEE5gRe6yFR4ibTyHUK2aFg/u2SyAYNG1oz2FlczRGO1Uoi",
	"LEzmmbKlqbOZxUxB07MP1k4QW7biSCou8BKQQR9JzCy80aSQmJnCiW2xTMeUaZgCt/immGsJ3ONugrQB",
	"WQ0oQ9wolUz9TH8G87k9hfk02x5EtKux86ZWI72sjhYwMyAiX3beJsfTJk/HMW+QKMzhercj10zqp4it",
	"0P7rF5pDGqMa7nyjop7MZ8DwXUp5814xzig+BbPGONV2nmpLbcK4dsKZ9kc/TFbY7AoboxGhsmvv7Nqk",
	"TNeOBcVKiAuEGfJuvP32vf7vf2rherS9JqzjWoXYM82QOGg/BJU8p9kmWGfOMUF47VOaEnFBTArKzScz",
	"Lsz/SwHYHAArukiQg0v1ykZu+VK+5EwJHlEVOaw7NvKE6k3V4ERgXi1NsYr5fI2Fqapzqf4FVtjYk5jR",
	"zCN6uU0ULdSYDDZon1XzF1k8jITr7x5JKxZaPHgZJYc21PvCYCOcQbmSVv2hWm+KB1fzvx3NxM2oOsGW",
	"KZ75skqNQWrJJ1tCSUmLalwavROp6js8xsoayJprHN9yAk0RrKs++YmTTSzQ7GOAVyPjdyM1YC+sG8IZ",
	"iHJ6/IOUQxvjZc7nOL+Cm7Kd1G8w1JAGOwyEoqP42AKCF3MeyyokGB5j3OXg/C9zwGKP8++TooNSDw+C",
	"/jvBlwJkZMtReVVioSjO45HPNHK2JvnqfhkLvyebyYYSFM2Czq6pylbnEZufgFSU9c/HWCz9xDYeRQ68",
	"8YIzbYFMoW3qSt80SbRueqWuUR2of7pKeteFXCZ918Sgbn1IWCXbgmdnD+aKLjEIFNZn7PPDXiDJZi61",
	"7+JHmApWhpzVUFspnCGMqJKd7H3ofLoKuYgEKJdnaAN/gVZVgdljbVTgeQ4IbsocW74hWUJGFzTTnpCJ",
	"6fIsq4QAg4txzC6Yg9gKlsbOqDbY8xWgX8/P3/kYbab9re8/vP/l5b89eXp0OUVnYA5P9MMjtAQGwoSN",
	"5xsLkwu6pAxJW3q44CKBHYohF+bWqMohRhO54kJNu6SRVVFgselMblLsM4ROFDr79fS3168u2NvTc2Qj",
	"zfbWR4CY4mk0p66s5ILpJZWVKLnUhuACGXVJ/7Bc+R5my9kUVdJKDNdmxlq7v6bC8oIxWHJFTd//QBIA",
	"Rcj6dPbsUZRlXcfBik3NSE+zuLi3Ytzd0mdTnzkNhFkgH6lGwVBkNV1thLq4bUFvTNiDHeDJVIkKYpae",
	"GNQnmBAxqEk+o6K5d5RXr2W6i4IajvSGlNspmNYieSzHELTLZAXFTmAMfolqCZlYXSwj0teRVJq64X45",
	"DWVKutsLTmLpknEBEuE8txKLlMBMmuwEsoa/jGaPgGW47IOgjNAMK9BgsOrAkmiFGclrDYjMJLLKjVbE",
	"S00qn9KyiBHkJlltSr3zJBfIeF6JnBZ14Zc2Uh9h89gGfkpMhbTblGi1o5WoMCe8/rcVYL1yxZErqkQX",
	"mhrw+JoSQHjOK2WVtF9ViEjDqdxHtSIWYztRlfBl+5szWaMTdUybATFB6kp3UN/aqcCDPLcS4/xMukBU",
	"+VSkEnS5BIEwchM4iUF1XvOChdxnXKGqTLCOJ6+bBNT25yxeLgUsjdhQpjg6tVkho5UBE33WvFhjmjdq",
	"2g6cXTBT4S8RZchDbGYnnH2nkPbAEU5th2Q2dXRm1IN754c0IXwti1gkagZc6mHM1CfEWS2MzDex+16e",
	"nJaROL/GG2lSy+XUXHREeKEMZw0xdiPFOIe+KQmwGcjEfawgeO4yla3tp8UKS0mX+shV8TuQeLlj3mxc",
	"rZLd45YtoWGRKkIMeBNNLCWkon/W7BJADZy10cn6Xn1yymXzF7hctCuBb3DBY8Q9ifbVgu21fSlnZ1JP",
	"M4S5ufjrDYXeHml3MaJWZ1ak1NRuYj2UYXMHLsZXM8/foRN+unMMPRYUH1rkm+rmJx6LnHp4icOok2Ro",
	"Hf6k5JSp7ZvERezrAWNOI2BKbFLzh+plS6Kxhl1PNxgg9OQ6h5s4YHNtMojYYlJQrQHnOc4+arnwH5bu",
	"UltdE2TuXXAD/1OFlWpduQhW5rJs/UAOo9oT2n4Dxc1wUvc3+s+XoY0YeW479xLa9YT1fDES9sBH7EPX",
	"5HNwKy4Vktq48llJ5IVlZos8RmcFMbrmIifGUqsY/VRBez5ECTBFFxTErHWrnn5isyeHh88eHx3OMl7M",
	"qnnFVHV8eHQMP8zJM/x0/vz5sx2uLbiLFNbCdbCNd92GKjNJo7s7RdfzmpMdgOa7B9nJ9f4pSPvvj4+O",
	"DGl5CUyus5kU62MC6yfsaObwndlVzI52JzR+SFIH9e7bVU94obKpkGoSUQtMc762p1EskVaPapJVwZBF",
	"DjfxTJSErNJYnund6y54YEmzF5VVH2ZXG6WtvzYrXyllSnvmgAUI39v+9Ys/df7xP+f+6raZwrR257gN",
	"vC0Xf5o45lpPDuFSk3wNQtolP539MHv6gzX1gelW/e1wdjgJahoOcKVWB/W91ZLbo1lLqvHMtPE0ecel",
	"am69TltPnSTuSjRdDoJr97fT2DsjBnr92sgUFfiGFlVhCwXQk2eruz1AcnRYRETwco/34BsaxW/CN3fO",
	"Y7PUaB3oTs3F8G19nwbXt4f76k7N1eptfZ+2JN9wOpD5D5eamaFcf7jUxLXW/4eJlqvJpZ7BGY4HhMkD",
	"UhUmiBFVq6+qokThYxWv3p6hPzirY5Q28tiWzb+DS/6+enumJ5jskb/+4sOfmLv34Jgz3+2V1hbnzEs8",
	"Msk3e8/LRyxs5yFO/Wynu5MeqV8sSt3d6w6wb++M7R0+TDRCVSi4UZY6j2V9iXGcLPU9oi9aqlry9Dun",
	"rdOmvej3sKTSBkN0RyRs2YAp/CcEYcTgunXBFRVQzEHMLtj5CpBWPNo2yky0KsupPhudbS0RVigHLBVa",
	"CswU+k67Cd8hLtB3/+CUfTe7YBfsneAZSJMmcZGQFh5UIqKVEpYblq0EZ7yS+QbNN24HTJE+sZEnoe4v",
	"TYKljtK1plthaS85lNU8p3IFBF1TtbLFcsdmgT9eVIeHTzNcUv2X+QM0ouccLXie82tUDqI8RRteoRVe",
	"mzzStblZbAfqAXbDHl+wx0jT4KzK9FTTFOApJgSIa2k+o+9N+AiuLUvqVZneJr4bcEw+8tBObNg5DU2v",
	"43HQmoR4jSXCuQBMNqh9AboGZkKRdwOFGTL1SzYLp40VTTqbGmkLo3ZMH0XU37u6TEmj0td+/USnLybV",
	"Ut8l4MBLSINvVjXmEYNrf0+bstf2hvnxk9EG01ehqHLAaxilqUzPUFUJKPgaOpL4MJrqtYaVUlVtRO6v",
	"q9rz7UlZtYCM1laGDlvVlWVETGG1FZXrF1dVBtRWXWWWkdIgBppLykT0k4GwRUENzv+QGsogM0ZFaYw0",
	"mM57E/dVTZzA42vFH1uePJyKemj1wJfyIAvqZJPec7+s1lIiKId8mJeuorAilqUE5Q32nC+RT2K2uZN4",
	"M25YDz+xTuYXdxYEtx6dF5Rwb967jnt0RLuZhq/HdWgigsNMOPPpwTv4mP2HUse6j/2nP8eO7D0CuddA",
	"VTSR+DUJES/H6Osz3e8zsMFkwL4i8lfzg+Y+xlYm1Jc69n1kNpAivHCVNryOc8lqjoIXwL+dnTGO+3Kg",
	"QG+n+d250bI/dp9077b0uK17+TJqGaKzlcHxHXw4hkd/fd67tJ7lvbsOPXhYv/V9tvgaYWlS4zzNcfYR",
	"GEH+Pvzg4/jpp5H3edL2r5t/mXres8CxnhM4yOprRNHgibllJK3PKtH3Cy6Q8wCnaIFpDuQRoqy5xe1L",
	"Hk151CzqvL7lBOzlpXsp369ksxqHPOAXEXNygFtPcSW3rSusCh7u2mfarQ3pC91AMW40TzJv48RL/67x",
	"XXJq7Z8p+SyeRx/1AbZ+XRtyOmAi7Y3d+zG00vd/I9wO3kz+ZmjtqC2CCwXDwvOmReR98bx+kvveXH4Q",
	"tGLPTn1TNx0Zkge+vGzorLEPruzTYK6BfPHnvPWWDnB9nT+5c8N7//vbuSGUCPFNA2q9rYbsjVSVb5AL",
	"j9u7xvYXaUy8ZOHcaPP20T0U+5fiFTum95yjFNMbf2afTLdQIkwf8tLM1amur9Zy06T117+Jw1Zx2Gro",
	"n4bvU93J7jsNX1Xq0hXWOK/sBepYDCVoHvo9st7tg6IEITkzt9lWgNw05kabHEoWBwP/30I3rRfBvszD",
	"KCaKC/fc2LAgmkfJ7i2G+2efwfPrYd4oP6D9Cs++j5ZvvsBfVJbK8J2jLcJUv4m0b2mqAcVsFft0ij5o",
	"6mvoLXPE1uUtzDMD7v0UM5mxUuzbC+Hde0KJqdYydg6QbxZLKB0yeNRx+Kg4a36e8s7HRT3HZzgyGlhf",
	"zbEhwxfAtmz1+rWwfW/1GtC3k+OvIk6mKjg7qO8bplXD2TVeLkHcN5LU/aHOP/OG9RSzRHIUMw8UHQSP",
	"zaQI1nrz7m5XMFu/xrxLSVvw49J7Tg6Fjz594QVRQ2meDrP3pWdbYFJVMNim3wlWWIKyD9Nh+3PcqPXg",
	"wrfyp3b5k5lErP0WrUTuLnPL44MD8zLfikt1fPTk6Pnk9vL2/wIAAP//sUg6CFCCAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

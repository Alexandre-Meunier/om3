// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(w http.ResponseWriter, r *http.Request, params PostAuthTokenParams)

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/events)
	GetDaemonEvents(w http.ResponseWriter, r *http.Request, params GetDaemonEventsParams)

	// (POST /daemon/join)
	PostDaemonJoin(w http.ResponseWriter, r *http.Request, params PostDaemonJoinParams)

	// (POST /daemon/leave)
	PostDaemonLeave(w http.ResponseWriter, r *http.Request, params PostDaemonLeaveParams)

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/status)
	GetDaemonStatus(w http.ResponseWriter, r *http.Request, params GetDaemonStatusParams)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (POST /daemon/sub/action)
	PostDaemonSubAction(w http.ResponseWriter, r *http.Request)

	// (POST /instance/status)
	PostInstanceStatus(w http.ResponseWriter, r *http.Request)

	// (GET /networks)
	GetNetworks(w http.ResponseWriter, r *http.Request, params GetNetworksParams)

	// (POST /node/clear)
	PostNodeClear(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/allocation)
	GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/config)
	GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params GetNodeDrbdConfigParams)

	// (POST /node/drbd/config)
	PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params PostNodeDrbdConfigParams)

	// (POST /node/monitor)
	PostNodeMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (POST /object/progress)
	PostObjectProgress(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/switchTo)
	PostObjectSwitchTo(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)

	// (GET /relay/message)
	GetRelayMessage(w http.ResponseWriter, r *http.Request, params GetRelayMessageParams)

	// (POST /relay/message)
	PostRelayMessage(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthToken(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonDNSDump operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonDNSDump(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonDNSDump(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonEvents operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonJoin operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonJoin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonJoin(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLeave operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLeave(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLeave(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLogsControl operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLogsControl(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLogsControl(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonStatus operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams

	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", r.URL.Query(), &params.Namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", r.URL.Query(), &params.Relatives)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relatives", Err: err})
		return
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonSubAction operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonSubAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonSubAction(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInstanceStatus operation middleware
func (siw *ServerInterfaceWrapper) PostInstanceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInstanceStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNetworks operation middleware
func (siw *ServerInterfaceWrapper) GetNetworks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNetworks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeClear operation middleware
func (siw *ServerInterfaceWrapper) PostNodeClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdAllocation operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdAllocation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostNodeMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectProgress operation middleware
func (siw *ServerInterfaceWrapper) PostObjectProgress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectProgress(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------

	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectSwitchTo operation middleware
func (siw *ServerInterfaceWrapper) PostObjectSwitchTo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectSwitchTo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) GetRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams

	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", r.URL.Query(), &params.Nodename)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodename", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", r.URL.Query(), &params.ClusterId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRelayMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) PostRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelayMessage(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/events", wrapper.GetDaemonEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/join", wrapper.PostDaemonJoin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/status", wrapper.GetDaemonStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/instance/status", wrapper.PostInstanceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/networks", wrapper.GetNetworks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/clear", wrapper.PostNodeClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/allocation", wrapper.GetNodeDrbdAllocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/config", wrapper.GetNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/drbd/config", wrapper.PostNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/monitor", wrapper.PostNodeMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/progress", wrapper.PostObjectProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/relay/message", wrapper.GetRelayMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/relay/message", wrapper.PostRelayMessage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

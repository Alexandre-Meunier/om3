// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

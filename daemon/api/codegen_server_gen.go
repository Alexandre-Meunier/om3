// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9+28bN5P/CqHvgDYHWbLz6OHzocClSXv1d6nti9074GIjoHZHWjZcckNyZauF//cD",
	"X7tcLfch28rXJvmljZePGc4Mh/Mi9cck4XnBGTAlJ8d/TAoscA4KhPnr9dsfXr/ibElWpzgH/SUFmQhS",
	"KMLZ5HiiMkDLklJUYJUhvkTmA6GAiEQppGUCKVoKnpsGpueYToge+bEEsZlMJ+bb8cQ1CfhYEgHp5FiJ",
	"EqYTmWSQYw1XbQrdTypB2GpydzedvC4FtmhsY5XjW5T61ji8oLmGAbc4L6hufiEn0wjIH9fA1E+EKhBt",
	"qJRIpUkAupMmgu4Vh1411rCJgly2J7U9EdwWAqQknB2jdx8IS6/fTSleAP1+jWkJ1/96pVdS43+2+A0S",
	"daGwKuWvRYoVpFPNou+XnLdXVn3AQuCNWekbkhMVW2NOFDK4ooSXTHUs0PSL0/ZoOllykWM1OZ4Qpr57",
	"XuNDmIIVCIOAljdZ4ATODGxM28gw36VHpnx7nyBZYp1jlbVhcNNmxLsDimvaRXIdd4BCorjoBCp9hzjg",
	"oHkX4G+BYkXWILsJK3yXDshhewvUgnMKmFWwNq9oKRWIkzSuPhLbjEiKKk3kNYmkXOkGzsyfGu6mAyc3",
	"zXuSTobXvznlKbBOjcZc64MQ8pMMocMpyG5lgguCBKddIu6aImrkXwQsJ8eTv81r9T633eRcw4zuei+S",
	"3aIxXia7F32nBVYWnEm78qeHh/p/CWcKmFE6uCgoSYyCnv8mrYqv5+tb2rngCwq5hdJE/ey/ak1jd5im",
	"wfNPA/wHnKK38LEEqeJYHH0KLH5luFQZF+R3SONoPPtTEOP5p8DilCv0Ey9ZlBIvPo1YnDAFgmGKLkCs",
	"QaAfhTCbJ4LPJ+GMRoMkgH5leI0JxQujXrawufOb2+zel6XKLvkHMAgUghcgFLEbW/nPbXtDt7yH24II",
	"eI/NeiqjQFsrB4rkEDXB6qPunZu/Pdt1hIDuFGojmRjzdohmbri1hfV8Wr2PHKQPGz3EITNu0FmFuTRW",
	"3Mhh1uRrUcot0qFdoVJN3kOxVxV9unqcOlJ0tZ9V6+7qcVEtsdXj9enFW0i4SCOco1jKqHilWOFogz/z",
	"2wKpaPC9MkQ9Wf4YkER30JtOU4eYndQhEyPw69OL/+MMRh/bNSlaZ/fUeGovKeVJ5RM1ibXzXptOSNro",
	"W5YkjXXLCbNGbJt4BRcq1rJFPdPNTzQNUDU4RElX+aXtlXrmV4gvNmpYl3RzCUMeI2jCaW2/97LNTPCq",
	"6q7lk8lxo16fXuj+2WJc958Xure2HYHBSMTe+N6alZyR0Sv6xXXWhOSlIgxkXAr0sLSkYxG6qLq3tRit",
	"zEtNQkOYYL31AgKUQvjd/H0VchNTeracHL8bhW25kBupIPea97qaUzPv8Wb7edGWwZyn9h/j9Ieb5xd3",
	"Hm2rEKkE4Hz3+S7MuKhDEXLPTz91aHczw6EYXW7cY9MTaXcpW6AcpMQrQKWEFC02xplDcJtAodBNBgxd",
	"6r5Eap8+yfQnAYgo/UXPZL9+LKEERIGtjHPfPkeimODKmXXHbEecJbaCDLBQC8CqWoBZU7iKQR3mOuVB",
	"3z4iO749VESnu0iJJv6OQ85Bq4LrFuLme0tGiHyvqajJE4lJTCcUS3V/izOYvZ5qmMaXju1b5nFUGLIF",
	"sjsFOWtiwAbu5/Kb4Cx4JEX0S31IPNKMb0vGHMPiR3mljuLNbS4DSwtOmBq23MwcwYAYKbcVJTAlNl3z",
	"hwb7gN1Twa6m6zXIt4/Hx2NAbX9vW9iV0zTC97CWt7eWhhFqn+9unmqaHir4xbykYG3MraPCKtE4f2AN",
	"gqjNsHD4WYIxI1DqoibWqO56vG4tNCKN1rcrDcpjTftEAFaQ3sMdiEr7CA/JLb6BbgMPA8BPF6OySb5o",
	"fRYLWNtwYtVFn+YY+SCqlHpBtT9AGDZBy9ZaTphUmCXQycGiiNLABEuG+Fmdl5MkIzQVMLhNzrHKbLie",
	"M8dpqQQmLlXXVnuJLPO4QyyKLkW5jg5YUrh9n+PbuEVvWwnraVVYrEB1dBD8d2A7CR8PItLjiMxFkoEm",
	"lxqM05wFXfXINQhMdwBVYOHTp7uws6A4gdyF83oHVh31KAESxBpcOmWJS6omx0tMJWxH83xXY9uKEhBZ",
	"IpURiewhgzIsEeMKLQAYKm2aEKUlIMURRlestklTfsM0a1CiiWNNUoxyLYrA9I5BBQjC09kVMza2tmjb",
	"rQhYKqc2kWIxkBkvaYoWgEqWZJitIJ2iK4ZZiirkbwiluocEpREzK52ZfGdbnAtBuFftFW1eHG4TxnmE",
	"hK2QH2GSLQy51BtxigBxhjAiSm4Z4GGMQ/A1kYQzy5GBwGvV1SZBeCmSHTy4t27Ej7cFl5DWErh9Joja",
	"oqomHkj6aj8ZU+hw4Slew84Cbpn8fiV4GdebslxIsBsHpymxW/y8oXKbCrjAemcCjcl+JP/YCDL5obGz",
	"ZUs8DFooAB0zCnnBKV9thohy6fvdTSduj93f/7AHTahBa3XVFMUGsNiSnRlvqwP+W/u7kRBrrUQJZ+9H",
	"BQS3MG7NEMPlFNQNFx+6jl0Qggu5mzCTYvy2aoA/KWLTdQaOmR3bg1OkofS26WisfjUj7u6GiHdSRFzi",
	"+OZjzbB93VC4SohWg4iagNsuclGnGXxtxBi2e8tud47F+BUhXosuSwEd6q5opCtYmS+cGiS/d4woJaQj",
	"PD4D0vV201loUfLwFE7YkrcxN6U/saoB892Hsrz5ayJgtmmmzexRBOYpvNFDopuhs3qiqpxwKJh/u9oJ",
	"g4YNtxnsLK7mqMcqkwgLU3ChD+Wl4PksZgaanm2wdoLYshVHUnGBV4AM+khiZuGNJsXFy1NTGzQU33RM",
	"mYaVHxbfLuZaAre420HagKwGlCFulEqmJqw9g/ncnMJ8mg0HFu1q7Lxdq5FeVkcLmBkQkS+bMBzK77SQ",
	"yM0Rer+D1YVi7BSxFVqcfiIU7p1x+iQY2hIelwIcf1yeNb2lyraaMG4iVNqvfDfJsBFv66aLUGvVMzeM",
	"wO7CxqCwDnGhTe/K5jbfvtX//Q+9lZ4MFyxOJ+ehLxVizzRl46D9EFRwSpJNsE7KcYrw2ifMJeIiNXEp",
	"N59MuDD/LwRgo8kzsuwgB+e0M7yGC7wglFQH9Wh23cciyjSquyXFH2S/1Ct3xst0sua0zHfwd+op/seM",
	"jOrg1kaoR+1kUwScignY1mrazAyCOuOZwkWR4UgJs3ZFTZONZFnCoVSQNTCbD0JynSDvQsad4S47zpsx",
	"W8eDhaEbEdFAVOj4eCNoO2TrV10tpbL6DJTrXv44rv51LNZzLpVLrPCVfMWZEjxyglNYb/moE6LPulrD",
	"pLAoV6aI0ny+wcIUcLvyryVW2Dh0mJHEq53roRPCQu1H+6JcvEziFSK4+u6RtEpeK3teRJWbdpTbgmSD",
	"90HxrLbIQmurrlPPFn87monbUSXpDT848cX7GoOuJQ+Fc7s3yKiSq63p2wEHuw26EzoaR20H1dUsvioy",
	"kjvwpT3vR5bl3K8Mpgmnp3jJ4x5kA5sYryhfYPoebotm8VeNoYbU26EntRDFx1pALxc8lhHqYHaMade9",
	"87+igMUe598nRXslHh4F/XPBVwKkjKbmCywUwTSei+hGzl59GSv5u6ylMXlf9qle4MUNUUl2GXHLU5CK",
	"MDxsfeeEndjGo7ZJsIMgTRsgu9A2Nx5+qROi0Rzv+470nm/uNBJzueo8rDsGxdO+lgMNeHb2YK7oEl05",
	"c4QdyqXlmufTS5SVOWYH2nbHCwoIbguKLRGRLCAhS5IgxW2uhCdJKQSYZIAJZFyxwkJsJCFih0cT7GUG",
	"6OfLy3Of+0h4Cujbd29/evVvT58dXU/RhXXc0HdP0AoYCJOOWWwsTC7IijAkbZ34kosO7FAMubCelSgK",
	"MZrIjAs13SaNLPMci83W5KY0ZYbQiUIXP5/9+ub1FTs9u0Q2g2Pv+wWIKd6N5tSVZl0xvaSiFAWX2t9a",
	"IqPLyO+WK9/CbDWbolLalA3X5/8akCuHv2IMVlwR0/ffkQRAEbI+mz1/EmXZtqNtxaZipKdZh+yFyZ/t",
	"uzKmmH4aZJNEZbGjIFiPrNqprEOX0MjJrQkTsjmeTJUoIWaC9W9unKaid1t/wl3/GOkPvZzpLgpjMA0S",
	"0m8nd7FB+IhnF7bLzgKVncAY/DpqVGTH6mIJw7amJNJc9WgXoxGmpLvq5uSWrBgXIBGm1MotUgIzaZJ3",
	"yNrlMuqOAktw0QZBWEoSrECDwWoLlkQZZimt9CAyk8iSGt2IV5pUPmFsEUuRmyTbFHr/SS6QcYw6MsbE",
	"BS2bSH2AzYENlxaYCGk3a6qVj1alwhy6+t9WhvXKFUeuPBldaWrAwQ1JAeEFL5VV1X5VISI1p6iPBUeM",
	"ulVPDVzlara3aGcJVNRvrAeMKYELKsW3almBUisxzg0kS0SUT/QrQVYrEAgjN4GTGFRVDVyxkPuMK1QW",
	"HazjnbcUA2r70xavVgJWRmwIUxyd2ayp0c2AU33ivFxjQmtlbQfOrpi5lCURYchDrGdPOftGIe0gI9y1",
	"HTprFUYXDvhtXB03dZxKyyIWHYU2LvwxZuqT1NkuLF1sohVWjpyWkZje4I00hRvF1Fx5R3ipDGcNMXYj",
	"xTh/u160TdB3XN4NUk4ukd/YfiagJiVZ6YNXxW/D49WOsdVxt4TsHrdsCc2LrhLegDcxJLqkon3W7JJ2",
	"CPyn0bUsrUr/Li/K3DwOIkw4zYkWiQXFyQdKpPIfVu5yaFWCZK50cBON+lhipRq3OWrcfbKu7Xwyog3E",
	"4cstboaTqr8RCF/MNmLkpe3cijJWE1bzxSjUAh85MF2TT+VlXCok9Wnjk5vIlzPPbFXI6OQiRjdc0NQc",
	"XSUjH0tozodICkyRJQExazw4QT6y2dPDw+cHR4ezhOezclEyVR4fHh3Dd4v0OX62ePHi+Q43ItwdDXvk",
	"O9jG6WhClYkkUauxi66XFSe3AJrvHuRWyvhPQdq/HxwdGdLyAphcJzMp1scprJ+yo5nDd2ZXMTvandD4",
	"MUldqSG/zctiMp2k/IbVoW7j1ExKlsLS6MJ0sUGmm/2n6Rzb4JdB2VUdXV9iQvnalo7Hcn1VsVYdgQ+G",
	"LCncxsPrEpJSELW50FvccnmBJUlellbHmK1vDjP9tSZPppQpI1oAFiB8b/vXT14J/+N/L/07CWYK07o9",
	"x11gozrffeIkwNq/CBeaL2sQ0i752ezvs0NrHwHTjfrT4exwEpRPzHGpsnl1P7vg1vHR0mzMWX3imNhR",
	"fbt72ngaqOPGQd1lbh+2uJvGHucxgKsneqYox7ckL3NbjoCePs/u92rP0WEekdDrPT43UZMn/uBE/bRD",
	"bJYKrbnuVL+/MNT3WfBCQX9f3al+PWCo77OGzBsmB9L+7lozM5Tod9eauNZaejfRIjW51jPMrek/T5mc",
	"p2VunL6o1n1d5gUKH4F5fXqBfuesiuzYeE1TLP8TVHW/Uk8w2SN//RXtPzF3H8Axd8vGXqZtcM68YSU7",
	"+WZvlXkPz3bu49SPdrpdVUj1wlfXhcGgr32wakTH8A2vEbpBwa2y5DiQ1X3JccJTX1j5rMWnITi/cdI4",
	"UZqLfgsrIq2XqDsiYdOd5r5BmiKMGNw07tCiHPIFiNkVu8wAaQ2jbaTEuPEJJfr4cza2RFghClgqtBKY",
	"KfSNdhe+QVygb/7BCftmdsWu2LngCUgTRXYuYgMPIrVDDwjLDUsywRkvJd0gbY+Y5U2RPpSRJ6HuL038",
	"uQpfNKbLsLR3K4pyQYnMIEU3RGW29u7YLPD7q/Lw8FmCC6L/Mn+ARvSSoyWnlN+gohflKdrwEmV4bcLs",
	"N+bysh2oB9ideXzFDpCmwUWZ6KmmXYCnOE0hdS31Z/St8avhxrKkWpXpbQJfAcfkEw/txMbjuqHpdRwE",
	"rZ0Qb7BEmArA6QY171hXwEyM5n6gMEOm7sImKbRVoklnw8ZNYdQO6pOInqvLKzQqbTXXzgP52lQt9dsE",
	"7HlPrPept9oOYnDjr4IT9sZeYj9+Otoy+iIUFQW8hlGayvQMVZWAnK9hSxIfR1O90bC6VFUTkYfrquZ8",
	"e1JWDSCjtZWhw6C6soyIKaymonL94qrKgBrUVWYZXRrEQHPR6oh+MhAGFFTv/I+poQwyY1SUxkiD2XrS",
	"4qGqiadwcKP4geXJ46mox1YPfCXnSVDf1+kht8sBLSVAqh94unm8V9uisCKWpQTlLXPKV8hnd5rc6XiD",
	"sV8PP7Xe5Gd3FgS3JZ270+HH+Icq9ulxNgB9OY5DnQLqZ8GFz5rs5kq2nxMe4Sq2n8odMaj1hupeA1AN",
	"onxJ0sKLMWr5Qvf7quoCwpWLeV3oPUi+qlp832daDSkixK5GgFcRJ1kuUPBs/dfDLcZxX8gQqNZufm/V",
	"su+P3a2i+Ra3NZL+HQYZojPI4LjqOxzDo78+713+zfLe3UrvPU9PfZ8BZyAsqqi9mwVOPgBLkb//3vuz",
	"Dt1vge/zbGxfL/88D0jPAsd6nsI8qe4oRKMb5gqDtE6lRN8uuUDORZuiJSYU0ieIsPrWti/WMoUds6h3",
	"ecpTsDcjHqR8v5DNajzmgF+pWKRz3Hi+t3PbugtDwWO/+7Qvm5A++QZyb8EP9X3+z+Vc/Yb4ENde+Ye4",
	"d8yENX+HZ78uRY1mD7u/rI067TGd9sHa/dhe8buGESYHzyh/tbt2VAhBZXS/zPzSIPK++F290v1gLj8K",
	"WrFXp75qmS0ZknNf8dV3nNj3VvZpP1dAPlO7uaa6dZ7muLo63LlzwzvG+9u5IZQI8U0DajythuwFO0U3",
	"yIWz7duF0r8Ho903u0zz9NEDFPvn4iQ7prd8pS6m1+7NPpluoUSY3ue0mTsg265bw2uT1n3/Kg6D4jBo",
	"yzeep9rV3At+bLBdGwtrTEt7FTQWTQma+352r3VhIC9ASM7MjZwMkJvG3MqRfXndYOA/LYjTIPbneQ7F",
	"pHDpHhrrl0HzHNlDJHD/nDMofjl8G2X9N9/52PeB8tUD+IvKUhG+pDIgTNWrK/uWpgpQzEKx7z/oM6a6",
	"RdswQmz13NLcknaPQJjJjG1ir46HV4dTkpqaKmPdQPrVTgmlQwY/H9x/SlzUP8p6n5OiGv4JTov69cov",
	"58iQ4XtCA9u8ento39u8AvT11PiriFPBOe1N+J6bDjtle32W11+I1TD+jKnerSc/P0/l4Zjg2V0uKEnm",
	"1SXPbr5f3ODVCsRDQ4XbvwL8ZyaxJ5klkqOY+bX2efAsShfBGk/77HzvtfH78iOrDIMfyd/rPmk+SvSZ",
	"1wv2Je22WLyvw7T5SFRHrRO2RRYpVliCss+nYWSkFTXev/ha5NYscjOTiLXfmKWg7tq8PJ7PzftxGZfq",
	"+Ojp0YvJ3fXd/wcAAP//mFcuLeuGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

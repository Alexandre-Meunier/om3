// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network)
	GetNetwork(ctx echo.Context, params GetNetworkParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pool)
	GetPool(ctx echo.Context, params GetPoolParams) error

	// (GET /pool/volume)
	GetPoolVolume(ctx echo.Context, params GetPoolVolumeParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resource)
	GetResource(ctx echo.Context, params GetResourceParams) error

	// (GET /resource/config)
	GetResourceConfig(ctx echo.Context, params GetResourceConfigParams) error

	// (GET /resource/monitor)
	GetResourceMonitor(ctx echo.Context, params GetResourceMonitorParams) error

	// (GET /resource/status)
	GetResourceStatus(ctx echo.Context, params GetResourceStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetwork(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetwork(ctx, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPool converts echo context to params.
func (w *ServerInterfaceWrapper) GetPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPool(ctx, params)
	return err
}

// GetPoolVolume converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolume(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumeParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolume(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, params)
	return err
}

// GetResourceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceConfig(ctx, params)
	return err
}

// GetResourceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceMonitor(ctx, params)
	return err
}

// GetResourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceStatus(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network", wrapper.GetNetwork)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pool", wrapper.GetPool)
	router.GET(baseURL+"/pool/volume", wrapper.GetPoolVolume)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resource", wrapper.GetResource)
	router.GET(baseURL+"/resource/config", wrapper.GetResourceConfig)
	router.GET(baseURL+"/resource/monitor", wrapper.GetResourceMonitor)
	router.GET(baseURL+"/resource/status", wrapper.GetResourceStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vn1eXf1fAAAA//8IryZIe/sAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

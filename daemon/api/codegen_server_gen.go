// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (POST /namespaces/{namespace}/cfg/{name}/delete)
	PostCfgActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/sec/{name}/delete)
	PostSecActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/abort)
	PostSvcActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/delete)
	PostSvcActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/freeze)
	PostSvcActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/giveback)
	PostSvcActionGiveback(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/provision)
	PostSvcActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/purge)
	PostSvcActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/start)
	PostSvcActionStart(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/stop)
	PostSvcActionStop(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/switch)
	PostSvcActionSwitch(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unfreeze)
	PostSvcActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unprovision)
	PostSvcActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/usr/{name}/delete)
	PostUsrActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/abort)
	PostVolActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/delete)
	PostVolActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/freeze)
	PostVolActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/provision)
	PostVolActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/purge)
	PostVolActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unfreeze)
	PostVolActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unprovision)
	PostVolActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetObjectConfigParams) error

	// (GET /namespaces/{namespace}/{kind}/{name}/file)
	GetObjectFile(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// PostCfgActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCfgActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCfgActionDelete(ctx, namespace, name)
	return err
}

// PostSecActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionAbort(ctx, namespace, name)
	return err
}

// PostSvcActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionFreeze(ctx, namespace, name)
	return err
}

// PostSvcActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionGiveback(ctx, namespace, name)
	return err
}

// PostSvcActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionProvision(ctx, namespace, name)
	return err
}

// PostSvcActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionPurge(ctx, namespace, name)
	return err
}

// PostSvcActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStart(ctx, namespace, name)
	return err
}

// PostSvcActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStop(ctx, namespace, name)
	return err
}

// PostSvcActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionSwitch(ctx, namespace, name)
	return err
}

// PostSvcActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnfreeze(ctx, namespace, name)
	return err
}

// PostSvcActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnprovision(ctx, namespace, name)
	return err
}

// PostUsrActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsrActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsrActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionAbort(ctx, namespace, name)
	return err
}

// PostVolActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionFreeze(ctx, namespace, name)
	return err
}

// PostVolActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionProvision(ctx, namespace, name)
	return err
}

// PostVolActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionPurge(ctx, namespace, name)
	return err
}

// PostVolActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnfreeze(ctx, namespace, name)
	return err
}

// PostVolActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnprovision(ctx, namespace, name)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, namespace, kind, name)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.POST(baseURL+"/namespaces/:namespace/cfg/:name/delete", wrapper.PostCfgActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/sec/:name/delete", wrapper.PostSecActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/abort", wrapper.PostSvcActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/delete", wrapper.PostSvcActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/freeze", wrapper.PostSvcActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/giveback", wrapper.PostSvcActionGiveback)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/provision", wrapper.PostSvcActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/purge", wrapper.PostSvcActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/start", wrapper.PostSvcActionStart)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/stop", wrapper.PostSvcActionStop)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/switch", wrapper.PostSvcActionSwitch)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unfreeze", wrapper.PostSvcActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unprovision", wrapper.PostSvcActionUnprovision)
	router.POST(baseURL+"/namespaces/:namespace/usr/:name/delete", wrapper.PostUsrActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/abort", wrapper.PostVolActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/delete", wrapper.PostVolActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/freeze", wrapper.PostVolActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/provision", wrapper.PostVolActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/purge", wrapper.PostVolActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unfreeze", wrapper.PostVolActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unprovision", wrapper.PostVolActionUnprovision)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name", wrapper.GetObject)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(w http.ResponseWriter, r *http.Request, params PostAuthTokenParams)

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/events)
	GetDaemonEvents(w http.ResponseWriter, r *http.Request, params GetDaemonEventsParams)

	// (POST /daemon/join)
	PostDaemonJoin(w http.ResponseWriter, r *http.Request, params PostDaemonJoinParams)

	// (POST /daemon/leave)
	PostDaemonLeave(w http.ResponseWriter, r *http.Request, params PostDaemonLeaveParams)

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/status)
	GetDaemonStatus(w http.ResponseWriter, r *http.Request, params GetDaemonStatusParams)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (POST /daemon/sub/action)
	PostDaemonSubAction(w http.ResponseWriter, r *http.Request)

	// (POST /instance/status)
	PostInstanceStatus(w http.ResponseWriter, r *http.Request)

	// (GET /networks)
	GetNetworks(w http.ResponseWriter, r *http.Request, params GetNetworksParams)

	// (POST /node/clear)
	PostNodeClear(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/allocation)
	GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request)

	// (GET /node/drbd/config)
	GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params GetNodeDrbdConfigParams)

	// (POST /node/drbd/config)
	PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request, params PostNodeDrbdConfigParams)

	// (POST /node/monitor)
	PostNodeMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (POST /object/progress)
	PostObjectProgress(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/switchTo)
	PostObjectSwitchTo(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)

	// (GET /relay/message)
	GetRelayMessage(w http.ResponseWriter, r *http.Request, params GetRelayMessageParams)

	// (POST /relay/message)
	PostRelayMessage(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", r.URL.Query(), &params.Role)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "role", Err: err})
		return
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthToken(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonDNSDump operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonDNSDump(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonDNSDump(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonEvents operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", r.URL.Query(), &params.Duration)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "duration", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonEvents(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonJoin operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonJoin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonJoin(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLeave operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLeave(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams

	// ------------- Required query parameter "node" -------------

	if paramValue := r.URL.Query().Get("node"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "node"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "node", r.URL.Query(), &params.Node)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "node", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLeave(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonLogsControl operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonLogsControl(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonLogsControl(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetDaemonStatus operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams

	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", r.URL.Query(), &params.Namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", r.URL.Query(), &params.Relatives)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relatives", Err: err})
		return
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostDaemonSubAction operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonSubAction(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonSubAction(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostInstanceStatus operation middleware
func (siw *ServerInterfaceWrapper) PostInstanceStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostInstanceStatus(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNetworks operation middleware
func (siw *ServerInterfaceWrapper) GetNetworks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNetworks(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeClear operation middleware
func (siw *ServerInterfaceWrapper) PostNodeClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdAllocation operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdAllocation(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdAllocation(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) GetNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeDrbdConfig operation middleware
func (siw *ServerInterfaceWrapper) PostNodeDrbdConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDrbdConfigParams

	// ------------- Required query parameter "name" -------------

	if paramValue := r.URL.Query().Get("name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeDrbdConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostNodeMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostNodeMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------

	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectProgress operation middleware
func (siw *ServerInterfaceWrapper) PostObjectProgress(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectProgress(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------

	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjectSwitchTo operation middleware
func (siw *ServerInterfaceWrapper) PostObjectSwitchTo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectSwitchTo(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) GetRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams

	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", r.URL.Query(), &params.Nodename)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nodename", Err: err})
		return
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", r.URL.Query(), &params.ClusterId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster_id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetRelayMessage(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostRelayMessage operation middleware
func (siw *ServerInterfaceWrapper) PostRelayMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostRelayMessage(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/events", wrapper.GetDaemonEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/join", wrapper.PostDaemonJoin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/status", wrapper.GetDaemonStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/instance/status", wrapper.PostInstanceStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/networks", wrapper.GetNetworks)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/clear", wrapper.PostNodeClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/allocation", wrapper.GetNodeDrbdAllocation)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/node/drbd/config", wrapper.GetNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/drbd/config", wrapper.PostNodeDrbdConfig)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/monitor", wrapper.PostNodeMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/progress", wrapper.PostObjectProgress)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/relay/message", wrapper.GetRelayMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/relay/message", wrapper.PostRelayMessage)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

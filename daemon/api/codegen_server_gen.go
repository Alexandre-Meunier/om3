// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

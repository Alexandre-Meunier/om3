// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

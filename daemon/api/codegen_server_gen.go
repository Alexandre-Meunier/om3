// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /instances/backlogs)
	GetInstancesBacklogs(ctx echo.Context, params GetInstancesBacklogsParams) error

	// (GET /instances/logs)
	GetInstancesLogs(ctx echo.Context, params GetInstancesLogsParams) error

	// (POST /namespaces/{namespace}/cfg/{name}/delete)
	PostCfgActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/sec/{name}/delete)
	PostSecActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/abort)
	PostSvcActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/delete)
	PostSvcActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/freeze)
	PostSvcActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/giveback)
	PostSvcActionGiveback(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/provision)
	PostSvcActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/purge)
	PostSvcActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/start)
	PostSvcActionStart(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/stop)
	PostSvcActionStop(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/switch)
	PostSvcActionSwitch(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unfreeze)
	PostSvcActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/svc/{name}/unprovision)
	PostSvcActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/usr/{name}/delete)
	PostUsrActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/abort)
	PostVolActionAbort(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/delete)
	PostVolActionDelete(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/freeze)
	PostVolActionFreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/provision)
	PostVolActionProvision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/purge)
	PostVolActionPurge(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unfreeze)
	PostVolActionUnfreeze(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (POST /namespaces/{namespace}/vol/{name}/unprovision)
	PostVolActionUnprovision(ctx echo.Context, namespace NamespacePathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name})
	GetObject(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/config)
	GetObjectConfig(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetObjectConfigParams) error

	// (GET /namespaces/{namespace}/{kind}/{name}/file)
	GetObjectFile(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam) error

	// (GET /namespaces/{namespace}/{kind}/{name}/instance/backlogs)
	GetInstanceBacklogs(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetInstanceBacklogsParams) error

	// (GET /namespaces/{namespace}/{kind}/{name}/instance/logs)
	GetInstanceLogs(ctx echo.Context, namespace NamespacePathParam, kind KindPathParam, name NamePathParam, params GetInstanceLogsParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (POST /node/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetInstancesBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesBacklogs(ctx, params)
	return err
}

// GetInstancesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstancesLogs(ctx, params)
	return err
}

// PostCfgActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostCfgActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCfgActionDelete(ctx, namespace, name)
	return err
}

// PostSecActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSecActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSecActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionAbort(ctx, namespace, name)
	return err
}

// PostSvcActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionDelete(ctx, namespace, name)
	return err
}

// PostSvcActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionFreeze(ctx, namespace, name)
	return err
}

// PostSvcActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionGiveback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionGiveback(ctx, namespace, name)
	return err
}

// PostSvcActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionProvision(ctx, namespace, name)
	return err
}

// PostSvcActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionPurge(ctx, namespace, name)
	return err
}

// PostSvcActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStart(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStart(ctx, namespace, name)
	return err
}

// PostSvcActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionStop(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionStop(ctx, namespace, name)
	return err
}

// PostSvcActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionSwitch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionSwitch(ctx, namespace, name)
	return err
}

// PostSvcActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnfreeze(ctx, namespace, name)
	return err
}

// PostSvcActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostSvcActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSvcActionUnprovision(ctx, namespace, name)
	return err
}

// PostUsrActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsrActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUsrActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionAbort(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionAbort(ctx, namespace, name)
	return err
}

// PostVolActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionDelete(ctx, namespace, name)
	return err
}

// PostVolActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionFreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionFreeze(ctx, namespace, name)
	return err
}

// PostVolActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionProvision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionProvision(ctx, namespace, name)
	return err
}

// PostVolActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionPurge(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionPurge(ctx, namespace, name)
	return err
}

// PostVolActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnfreeze(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnfreeze(ctx, namespace, name)
	return err
}

// PostVolActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostVolActionUnprovision(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostVolActionUnprovision(ctx, namespace, name)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, namespace, kind, name)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, namespace, kind, name, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, namespace, kind, name)
	return err
}

// GetInstanceBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceBacklogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceBacklogs(ctx, namespace, kind, name, params)
	return err
}

// GetInstanceLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "namespace" -------------
	var namespace NamespacePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "namespace", runtime.ParamLocationPath, ctx.Param("namespace"), &namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Path parameter "kind" -------------
	var kind KindPathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "kind", runtime.ParamLocationPath, ctx.Param("kind"), &kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// ------------- Path parameter "name" -------------
	var name NamePathParam

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceLogs(ctx, namespace, kind, name, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/instances/backlogs", wrapper.GetInstancesBacklogs)
	router.GET(baseURL+"/instances/logs", wrapper.GetInstancesLogs)
	router.POST(baseURL+"/namespaces/:namespace/cfg/:name/delete", wrapper.PostCfgActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/sec/:name/delete", wrapper.PostSecActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/abort", wrapper.PostSvcActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/delete", wrapper.PostSvcActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/freeze", wrapper.PostSvcActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/giveback", wrapper.PostSvcActionGiveback)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/provision", wrapper.PostSvcActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/purge", wrapper.PostSvcActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/start", wrapper.PostSvcActionStart)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/stop", wrapper.PostSvcActionStop)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/switch", wrapper.PostSvcActionSwitch)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unfreeze", wrapper.PostSvcActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/svc/:name/unprovision", wrapper.PostSvcActionUnprovision)
	router.POST(baseURL+"/namespaces/:namespace/usr/:name/delete", wrapper.PostUsrActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/abort", wrapper.PostVolActionAbort)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/delete", wrapper.PostVolActionDelete)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/freeze", wrapper.PostVolActionFreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/provision", wrapper.PostVolActionProvision)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/purge", wrapper.PostVolActionPurge)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unfreeze", wrapper.PostVolActionUnfreeze)
	router.POST(baseURL+"/namespaces/:namespace/vol/:name/unprovision", wrapper.PostVolActionUnprovision)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name", wrapper.GetObject)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/instance/backlogs", wrapper.GetInstanceBacklogs)
	router.GET(baseURL+"/namespaces/:namespace/:kind/:name/instance/logs", wrapper.GetInstanceLogs)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.POST(baseURL+"/node/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4+XBe2mAVmHr/e3t7e3/DwAA//87V71lmQcBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//hU6MFJSRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (POST /node/monitor)
	PostNodeMonitor(ctx echo.Context) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/abort)
	PostObjectAbort(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (POST /object/monitor)
	PostObjectMonitor(ctx echo.Context) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /object/selector)
	GetObjectSelector(ctx echo.Context, params GetObjectSelectorParams) error

	// (POST /object/switchTo)
	PostObjectSwitchTo(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "relatives" -------------

	err = runtime.BindQueryParameter("form", true, false, "relatives", ctx.QueryParams(), &params.Relatives)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter relatives: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// PostNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeMonitor(ctx)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectAbort(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// PostObjectMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectMonitor(ctx)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjectSelector converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectSelector(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams
	// ------------- Required query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, true, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectSelector(ctx, params)
	return err
}

// PostObjectSwitchTo converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectSwitchTo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectSwitchTo(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.POST(baseURL+"/node/monitor", wrapper.PostNodeMonitor)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/abort", wrapper.PostObjectAbort)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.POST(baseURL+"/object/monitor", wrapper.PostObjectMonitor)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/object/selector", wrapper.GetObjectSelector)
	router.POST(baseURL+"/object/switchTo", wrapper.PostObjectSwitchTo)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

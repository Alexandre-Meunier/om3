// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network)
	GetNetwork(ctx echo.Context, params GetNetworkParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resource)
	GetResource(ctx echo.Context, params GetResourceParams) error

	// (GET /resource/config)
	GetResourceConfig(ctx echo.Context, params GetResourceConfigParams) error

	// (GET /resource/monitor)
	GetResourceMonitor(ctx echo.Context, params GetResourceMonitorParams) error

	// (GET /resource/status)
	GetResourceStatus(ctx echo.Context, params GetResourceStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetwork(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetwork(ctx, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, params)
	return err
}

// GetResourceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceConfig(ctx, params)
	return err
}

// GetResourceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceMonitor(ctx, params)
	return err
}

// GetResourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceStatus(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network", wrapper.GetNetwork)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resource", wrapper.GetResource)
	router.GET(baseURL+"/resource/config", wrapper.GetResourceConfig)
	router.GET(baseURL+"/resource/monitor", wrapper.GetResourceMonitor)
	router.GET(baseURL+"/resource/status", wrapper.GetResourceStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9a3MbNxLgX0FxryrJFkVZtpNNdJUPjp1svGfLPku+qzrLpQJnmiTiITABMHpkS//9",
	"Cq8ZzAwwD5KSFUmfbHGARqO70Wg0uhv/nSRsnTMKVIrJ4X8nOeZ4DRK4/uvVh19evWR0QZZHeA3qlxRE",
	"wkkuCaOTw4lcAVoUWYZyLFeILZD+gWSAiEAppEUCKVpwttYfqIIxnRDV888C+NVkOtG/HU7sJw5/FoRD",
	"OjmUvIDpRCQrWGM1rrzKVTshOaHLyfX1dPKq4Nig0cRqjS9R6r6Gx/M+V2PAJV7nmfr8vZhMA0P+eg5U",
	"/kYyCbw9akaEVCQA1UgRQbUKj15+rMYmEtaiDdS0RHCZcxCCMHqIPn0hNP38aZrhOWQ/n+OsgM//PFUz",
	"qfB/N/8DEnkssSzExzzFEtKpYtHPC8baMyt/wJzjKz3TN2RNZGiOayKRxhUlrKAyMkHdLkzbg+lkwfga",
	"y8nhhFD5w/MKH0IlLIEbBNiyj9AZW+6KzBgFCO0RuE7t2WxWo7Yg6c8/4R/hyXP4YW+eHDzde/4Mftj7",
	"8Vl6sLeAgyfp989+eAb4X4MorxaayHEC7zRyOGtjS12TjsXkvnetoCOWdo3CUkACMkgk8wkzi43KUogs",
	"J/p0iv/6GYqD4Koywvoey1UbCaa/afUSGdZ+GqM5OocaMePeoSsKpPOD6QXM/xkkgMInzoeN8doIDxFf",
	"bx4vBJIMCaCpWoQCLRjvQEV00iiyIuuMv6G19gEyfPUyK4QE/joNb2+J+YxIisqd0u10ImNSfWBU/8kV",
	"uAghLJgzkvYsSo2TWpk0uuNS+3UrhByQPnRIGhdNDoIVPBmlJlyfiIAuxD8OpiQPyucHlkGHfOKcIM6y",
	"mFa0nwKS9z84LCaHk3/sV6bQvmkm9tWYQdk5tlOOU8cRJYKP9znOgGu1dETOqDAzf/rkifonYVQC1Rs0",
	"zvOMJNqY2f9DGHOogtc1tfeczTNYm1HqqL/7X2rOz29nsF9wij7AnwUIaUY9uI1RP1JcyBXj5C9IzbDP",
	"vspkf7yNUe2I6ISsgRV25J9uY2R1eshIoof8/nbk6TWVwCnO0DHwc+DoV84ZN+PfCovVsCQB9JHic0wy",
	"PFca5Nqtcr2MX/A5kRxLxo2Nrk9enOXAJTELXZS/d2Fhe19PJwXPwgq82nk/6UZTB/pzqdTMXqugvCjk",
	"6oR9AdpGCC5zBeYMa8KVJrw6W+xJoveR+uDTyeUewznZS1gKS6B7cCk53pN4qeFd4XU2OfTBKmylG7x7",
	"Il4v1yc0Hbu1tyeT6DNtH3Vtd3MAVvC0iTusk9rBVReLzLBO70rMh7HfdnNS0CCSneTUWeYWlU4BqE+5",
	"4kOrxZElRez7u3LesRaV5LdavDo6/gAJ42mAcxkWIiAgUyWJOPjBGVJte1D6a6Y8fTqy9AmhtZ50o6lF",
	"zAC1yIQI/Oro+P8xCoPtj4oULSNkqt0zL7KMJaUj5GusWZLWoBeFtnFb1F4TyniY3jnjMvSlQXDdzAGa",
	"1pUAScPkLh1Ybeo4gSkxn19JCBqePhJxzmJYh5iQsMwaen2s1gBels2VTFMxrNero2PVfjUf1vz3uWqt",
	"DGegMBCxN6614iWjZPCM3trGipCskISCCIuB6pYW2VCEjsvmbc2Xlba1IqEmjDffagIeSv74cf6+9LmJ",
	"s+zdYnL4aRC2xVxcCQlrp60/lzAV83YH7fd5WwbXLDX/GaZzLJy3dg9rqh0hOeD1eHjHul/wNOVzz4Gf",
	"WrTjzLAoBqcbPjorQOqsuJqjNQiBl4AKASmaX+lTNYLLBHKJLlZA0YlqSwTKsUxW6icOiEj1i4Jkfv2z",
	"gAJQBnSp/RTtvSeICS69CnZrjrgqQjNYAeZyDliWE9Bz8mfRq8Nso7XXtovIlm/biuh0jJQo4o/s8h6U",
	"KvjcQlz/3pIRIs4UFRV5KmU0ZywDTAfugx4IReEMC7nrrdbBvG6y0Bu7GrmfiSdWruq0CEvbao7MUkTW",
	"xOkWqh4xeuNtNjvSdG+rXWhHEI/9HWhXMCMnvKQ6nAyw8Y2F6yyMfoTae6KFU4KJs6qczIsMjGHWUK9G",
	"8QRtagHnwIm86jefHRSvzwCUYtTECtWxW1JjooGtzpyhCo3yoGWt+nDAcvdWtwe2srrb9JdYDji7WHLV",
	"JljDXA/gwIX4ou9C1aIOuoW1x7JsovZMjJyfVghFgsrqJhRrv2hrLq+pkJgmsOn53fWvDvAD7VbX0bNc",
	"hx3IXUfvRN4inGvzQsvYUIF1vV5LWIcEtTHX9vrI86C8JCtIvohiHflIspQbh0yJZc+1ynSS8jywpV5P",
	"J0DPgwAWGVyerfFl+FRgvhLa8VVivgQZbmBZfoYTd0YOGmlRJwHjyQqE5HZZdfHonddUnWoxd1EVw4mX",
	"27vJVsM8wwmsgcqznGUkuep1ULr2701zBYLD2QBy5Jywhgr36Onub4xUpSkx1x/va9LWeaNiAVSrsrVE",
	"RMJyGEc3UcwFyH6HqWnmjc1ylrFlLzlPXLvr6aQwERXDFXxL++b5xFt63kIzq8csFW9heKugLvIt+Q5y",
	"eerf9vkCPXV3xU5WA3LmCYTPfcelivQeMWs0au0ear9bsr1Stozmmr10/sry6x5ZO9eQWReTJZGrYj5L",
	"2Hqf5UDFebLP1s/2E8Zh3wHS5K7rw810rek7TOPqVlEX08hdCob3eqvatk0ribuckLXNZCukbxXdt3ag",
	"Orq07on2NHfTBR1ZjaVUakidCFTmQ8Me8TbKVu9lxuY4O4PLPIxOo8UZ03aU6Id1Nl4RTdXBcYXPMsAp",
	"8PA2TUTf55yDAH4OabhFxpLu+foNNppEXb+dwSUkxVgYlR5UICLmdKOROEut8749a2+7b7FtZ5umZ5G2",
	"d00TeHE28mRgv2zEh613wvra6JDv2CLxxbUh3A1BjItdQBZinK9R2dE0QMFOEW2sofquWgNSbculhhm6",
	"m74tPdy73E4t1M32U9u5b0P1m221OXmL5db2qKh/4hyTbPh1fsKokj1SVyietkliZ7YFZ38BHbsl1DR6",
	"CgtcZHJyuMCZgGZ4g2uqHeG8AEQWSK6IQOaIjFZYIMokmgNQZKUZpQUgyRBGp7RyYKfsgiqcUMLOgRv/",
	"NUZrNWugipgoB05YOjul2iEvVxD4ioCmYmrC3wwGYsWKLEVzQAVNVpguIZ2iU4ppikrkL0iWqRYCpEJM",
	"z3Smo6gD+xkW8kxIzEdvMV5s2DC+K0LgbESHnLNzohSSYV1PyErZdJd7UoVMe98rKLUe9hFHuQRnED58",
	"bn/y0suwvr7sYvKXTpvnHjMrLrUUuc+Nulp3lHDT2+iEZCm9W5VugG6m0U3fPoXutdpKn1eCduPq/A1b",
	"dvs2bYMNPZtHIC8Y/xKI2OCc8ZEuo6jrilajRC8Y2yadc+130dbi/1G37Y6LcUhM3dzcECGyW7jjhNER",
	"M0Aa++l1Hrj/y/toNmDM17k3ePQgGvXp8aCp3rzpy6sQLpdxoI1Ph2oHIV/nG5Hydd5JzKj07lISBwlV",
	"x9Q/Ojmuo7jgENlb8tphlRbruY1KIX/FdiNROwHHwpb0kLa1BWdGC2IfDGgYdt+h+o6+61CdRt9zqE5d",
	"dxzq+0jJY2n0bsObV1thRu4UPDvxbMlxAmfGWqzbDVUWYHttAk6vxnf6gxG62YAiz4iM++WbEbDaQRyd",
	"ZQP/MGaNMXusEKWCtvbRaj12XePpeDnp9ss2WmxkcTRWEgzrsZGloQWfLlgbUZ1yGMp30b+7OCRne+jw",
	"JfNJp94MJeYb1SVoVkRzkMr8I4uC/r/NQNJomFgpjZ3BVR+9dN4Y5jptidClzguehVZCHs5DMwBC05YM",
	"Cck4XgLS6COBqRlvMCmOXxzptMC+4DTLlNqNisE3ytytpPBW5M/IQHQ7b2efllxQHTX/g4zU6bJtCPrn",
	"Ogj906w/cM0Q3MCNzWbUNUEoMi4KOOb+H+vh38TVevNO9V07xO+5P/prOpeH+w70rr21L7i2bW/kA/Y6",
	"dm3cW/t+G+bsjavOqL93aVPMWjKKcxL+vcwJ29gj10orC9nmqh+W4SW7gfN4aW49Y+gGzkZEnIkc8JfY",
	"BWNl97RwXxN6pl14Z2tYR+J9yibiAucDjmeGU4YvdS6UtKq7Bpc6TqOOSmvc2jTLOQ1ZrNs6+WprdRPn",
	"XtWva6Vu69Tzj5C3sE6Fs7GHn0ZVh8DkTWbbOJKaPjFymq99aUrtxaCX5Gb7nAbqQIRoZnB6hUOm1Mi7",
	"rI7wvmGRryWA6+5wwDHQCK2gRcMHRwC0MK5LJRrU8c4Bv7GG9+NuWjzbPFRx/LXTDqIRSxClJTgIwrF0",
	"8ZWdcYqbX4xtEH24WRThWSkOZ6aY0qYSGAB13bKGN4k59yBcx67ShgQp2iXhL4BmIGJ1pxaKQGzISi0m",
	"sX7p5qISa7GILfJ0m9Cl/vuNZLBx4uitaOjNN2BPww/cgE2PjbZgr2sL2ZFxenHwZf2i4Qv3XV1llpEP",
	"E8p0FG6xViOvsHb4mLMY91GoIL/zj3T/u4ACAtnroSN2d+L0sHXagttara0WITI2tXSDIvqIGi7T5Dqi",
	"csk62mVYSGTIpg7JOEX43BUlEIhxE6llgQtlwWq/NAesV/OKLAL0HkaVliK59ud4LEumd87IaRw3IZZL",
	"stZhAJTRPe+vfSUlBU1hsT3CZlCNL2NZNIUM53hOMlLeaQ6W+03umVeKJeMKLGx1yVzN3N4zTyfnLCvW",
	"IzKZKxD/R/cMunfby6Ds5WIARg4Wol5zNp0xxMOZwni+woEamJgi88lEKBjCoZSTc6AmTxiJ8wR51bhC",
	"Ea2Re2t3Jdpw65ox1EdE1CASvDKa7kK1mZZYZT7YqZS33HqUz538sVwdfLl/qzf0YdSFtPmwbCleMio5",
	"C3jeMziHrK5+iTqOVloohXmx1AaV/vkCc+pCLJS9haXWSTmmJHHq9XOfyWFG7Ub7uJi/SMLVRqqrS4ek",
	"U/tCsjy4aYpiHrjoMQmqXnW7TC1D7yKnKhe3mv/jYMYvB1X7qxmvLjFGYxCb8hFLoaog4sp2BXJPXQmW",
	"HW7pdaDXXoGbcfVK6nA6TDQ1YevbiDA4skqaVVpUqyEDHF8QmawCxisISWhZ0iauC9eEvjYfDwYn0oWQ",
	"ndaG7Eb9ZQaY3yBp3nO25CBEsGBBjrkkONumYIEDcd2p32s3N7uQZg/i9fAsZbcRtG9FYkTU1TPfVvnp",
	"wZT74I3UwCTsCoJC1v0ZtoDGgdQwFNC1WI5NUw3n+huC1eAb6B6sICFtbbvAypTW81dX2C/QqlhjuqeM",
	"djzPAMFlnmGznpDIISELkiDJTJw4S5KCc6CJCxo4pbkZsRaAXb8PLAL7xMkK0O8nJ+9d3LciM/r204ff",
	"Xv7r6bODz1N0DFrRoB++Q0ugwHUo+vzKjMk4WRKKhCkSuGA8gh0KIecXCyMygxBNxIpxOW2SRhTrNeZX",
	"DeC6xMYModcSHf/+7uObV6f06N0JMtHrpoK6h5hkcTSntobNKVVTygueM6EOWgukbyjJX4Yr38JsOZui",
	"QhC6VF3VhngOyNZGPKUUlkwS3fZ/IgGAAmR9Nnv+XZBlTVeGEZuSkY5mEdnz3XbNiqq6suIUOXcOYrw0",
	"YZHnB2oe2mwiw5pcah+RPqpJXkDIJulWIThNeThX/r7qlg1u1XfgXFRkno5RZL0ePZ+vo851NYEIHMH8",
	"7yJaLWXUMBq/SMEUEZmdPchtGDvazsofGD8ayEwcFkPaTB+57pjVuNs21yt239aYa8jSSolQ2jqNpsBa",
	"6nS0UBoqnV+Fv3MwZ6NYiQX18SzV5buHxY+2y0OVU2jgW0OuwqQ57NCclAYxd5ObUge6Gfe7o0QDrTby",
	"ogfWDQzvtZEvvSbeWyF9q+i+YcvRPHzDlr9Sya+6OFi2iXtR2ifHaAWroEuk6tA1wV2VJxjodWpW9Y25",
	"nJoKuoWhp4tGKPoPtlcTLQdtrP7Ybb5yA+pmGqQnXi3UbKvlODJubSerssHNQBD6TRY1VDivMaH1Koyx",
	"SK2qbXfJQze38iwRuz8ZdT/reS0GBxO0KpuaU0n8UrdhFLXFyWzqgWKNhEphH/2w5yGypIyDQDjLzHkI",
	"SY6p0DEnyDhARdDvDzQxkXP1IQhNSYIlqGGwbIwl0ArTNCvP10gDEUWmz9w6xk64JGyDWIoskNVVrs51",
	"gnGk1W0kC5vYAK46Ul/gas/Ek+eYcGEOgak61Cop4tqvp/5vOKxmLhmy9YHRqaIG7F2QFBCes0IaF4Cb",
	"lY9IxaLMBcsHIrCXIza2ho3dqPQKWWbYaZ3hZIGIdJntkpPlEjjCyAKw7ERlmvwp9VlDmURFHqEriz5g",
	"4pHCuVjwcslhqXlKqGTonYna0AdywCliC/TiHJOsOqGbjrNTqp9hEIhQ5EasoKeMfiORkCxHOCarEfRH",
	"xPnE9EKfPe5Z8rH3bwxfcHaBr4QuPJBP9UNwCC+kZpSe27iZjX0CwtThijwZ5KXomHZ1Ude3hEKQJYUU",
	"yfAbcVaJj4iKGpTZ6VSa0zvlnZZZaGZZ+RW7vUT8Vr59eeHkjjely8lSx84jVvW4bqQ46mwdk1tes163",
	"dPxmpkl3fG6g1VaGybg43e3sEmZ2N3eFiFMTTzbPcPIlI0K6H5b6Lk5HJZhyIpPp5A+mP2WAz/Vrkoxp",
	"YfizwFLWqrpXMuvyvtpOAEokwQMcIBbC67K9XisuonRAz5MqdLR2hC8BlvBCBGsNH9i37SeXcrViQiKh",
	"Nj2XJ4eApjkjVM7MohqcBIbRBeNZqnfQgpI/9T7swUMkBSrJggCvv5lI/qSzp0+ePN87eKKWzKyYF1QW",
	"h08ODuGHefocP5t///3zEZXRba12Y3nYsbVPvT6qSAQJOk9idD0pOdkYUP/uhmxkH94J0v60d3CgSWu1",
	"0Uzw88MUzp/Sg5nFd2ZmMTsYT2i8S1KXG51b9YXaBlJ2QavQBj+8Sqn1dH6FdDPzX904uMC13o+5+nKs",
	"zBcIXam2LyNt08HVWvyRd3OsrZcvHbpp1BAJbBcnXvRyFXCywCRj56ZieChCzguwdWzzuiwyuAxHnAhI",
	"Ck7k1bHCznBhjgVJXhRGDWusNSPUr5UEraTUZSnmgDlw19r89Zs7v/3n/5649/Q0CP21CePaO03Y27uJ",
	"pbs5qSCTC3QOXJgpP5v9NDswxjJQncA1eTZ7Mnsy8ZKV93EhV/vlA1Y5M1cMStr0weN1OjnUd9TVI1vT",
	"2nPLkULzVZN98wDi9TT04LEeuHz2eIrW+JKsi7XJrEVPn682ewn54Mk6sIg/3+CzhBV5Oh4mPIhBKdHa",
	"V42qd/362j7zHqjrbqsaVY/J9bV9VpN5zWRP2j99Vsz0JfrTZ0VcY2t/miiRmnxWEPbt7de+OTLs47lT",
	"IVE5sy8HmGCbF3PmnPw3w7ZQ/HPfy5J9THlyk8y2Ty/2tf3Reyyxr+1P44RoC8FwrzkEZWPBAUyA5kDh",
	"+M10eJSOhyAdBR0tHx9dl0cJuZcSYnyM+ykV+2mx1q7f4KHnVbHOkf8o9qujY/QXo2XckIkGqkvTv0GW",
	"z5wpADcpRO51xTtsOWzBNPtwj3nTrsY5OHelp4N8M28vOVeyadzFqV/P3WMAo8zTV86UjL3b5bV9Q9ZE",
	"DmmocfmNZPoNpH67U8KlNOTYE+WzZcOEp3rR5l6LT01wtMfM2wiaz0YviTD+a9UQcfuMtGQIpynCiMJF",
	"7Sk7tIb1HPjslJ6sACnrFajUl0YpSjKijlb2SC0QligDLCRackwl+oYzJr9BjKNv/sMI/WZ2Sk/pe84S",
	"EDpG0Tqva3gQgVKlfbC4osmKM8oKkV2h+ZUV9SlSBz7kSKjaCx3dWN6T1MCtsDBVi/NinhGxghRdELky",
	"JYoO9QR/Pi2ePHmW4Jyov/QfoBA9YWjBsoxdoLwT5Sm6YgVa4XMdxHmh3xA0HVUHszIPT+keUjQ4LhIF",
	"ahobeIrTFFL7pfoZfas9/nBhWFLOSrfW118ex8R3brTX5lYuPpqax573NTriBRYIZ7oAHao/dVgOpi+D",
	"NhsKU6TTXEwIrDrxKtKZ4L+6MGZEyO8Ceq7KZvmPcRg31Fw7ythVGVNS3yRg5FxtwzMqD5LkBYTP2BQu",
	"3IuMhL4xb0kePh186n4Qisr49IdoKt3SV1Uc1uwcGpK4G031Ro0VU1V1RLbXVXV4N6SsaoMM1laaDr3q",
	"yjAipLDqisq2C6sqPVSvrtLTiGkQPZq9Fg/oJz1Cj4LqhL9LDfXG3mX1qiiFkRqm8bLstqqJpbB3Idme",
	"4cnuVNSu1QNbiv3ES6eMHmzb2ZeGEiDkLyy92tlRJDxWwLIUIJ1lnrElchGHde5ch+narYef3uwB+Kvt",
	"BV6wRng3sA28+JmOFfbBD4B+pLChcPVugz1QRk6KH8pnDbY607eu3h7K+auK8emmcxmAMu5EfoTXIHKc",
	"wDsXMzPgxH0M5oX7qs9NXvfU5veQGM/yIRvVsWr3qJo8whXz/arSQC/5ynIFN73LVyMFhNiGZ7LSByeK",
	"eVXfQDxu90GOE+/955h6LAvijVWN77FcjdGKRyyF29GI9QeiA9KkA49cfK1J75tWkcA0tTG3d+Wi5FYE",
	"p5SVuujsV9mPfRJUBurcNznyk+iGSdOj5CSw78Xm94lOlbt032Snlj/VJzzrKn/pwUtPv2HfeNXs/smO",
	"H9/eJzoPe8eadtixLTG5CTM29J5fm2MKSWSjP4WPTq/heldjOL6GivDeQouphqPyzbxOt6+f2FP5sec4",
	"+QI0RdXDe0EfsKmZ0XLB3EqIZ+2Zv/t55i9fqPN5vk/yAWx/nd93xrtnCR8E623+f5Tprm7kKL/erW3m",
	"1Ut+kS1c32M9HkJF9XpUyXYXcZlyTHq8VZrMuvUr3fgx0PKeBFo2RUIp6Ywt47F6x/p5cg6JLnzKlpFA",
	"PSUwvzhYY9XHG7Z0EXXTQQcNcbNKxr22fE/3g4YIJGUJ0eDlpa4wKkwEgUDfLhhH9j5+ihaYZJB+hwit",
	"Hlt0Olcnl8+CF536OUs96lZ+5QeqxftdiN5zoXd7Jx/gCvT28wfN9ZTP0/2qeHIf+199+OXVi6r1TV6Y",
	"1keK6syvR7VhC6YqrD0+0LzseqQLW36+YXK71Nm7bCXdJrunPZbsrll7M/e24eruASZXpUcenV1jFcIA",
	"W5fCRY+h++buGLlb5Jc8LCt3wPWZ/1br3babhlyD+cb4g17y/Vdf3tufd5vvA66wNNsffV1i31XU6GK6",
	"eYX1hplmBrn3WraqHxvN+dSlH0074XwG9rYgkqn7zlW02eYy+iZXpf/67qM97p5E9ARiRIEQ/zGeqj7I",
	"zRjbtZeFAox7iWkCmZFQ/bCFRLUnC2dDre9HH/nfzkfeIcUpZCBhuBi/Mu2/nhx7D4pqYbbhEmWgi5nQ",
	"ozQ/SGkeUnjFFzCvLs/dlGYzoUdpfpDSvCTnMMfJl+Hy/G/X4+5KtJvUo0w/SJkuC0oPF+qymvgdlupy",
	"Wo9i/TDFuuDLEXbHe9387opzQUuB1qFmj0b1A5btVi2Abtk+LpP976Zs6+k8ivIDFeW+pPC6JNvU8Lsq",
	"yCx/lOOHKcfVy+7DJNm0vx1ZtoNtItG656NMP0iZHlY22Re0WtXku2pIP3rwHrRMb+Dv+Oh1+lscER+F",
	"+2EJ965SbIwIPibZ/G0jIVqJNjHFVuXG3KQyM6OEYh86Mn5MIcNG3k8t5UeYLGChq7bpKlMLF/Mz2y5k",
	"+b6JQ29aguXTZpHrprN+TLD9QhOc46wwj/+GkrK9zx1FEVtQyToHLhh1m6AFo92ioqsCrNfxq+WC14j9",
	"cJTSgmTQL4O/kQy2ksCb55xG8eHwbetEBkO1x1SGvyf7y2f+utetIf4m4bO3sWStaDwcpnG25CDEEBvw",
	"vWt702ZgOVDIElxhujR7ebOqmns8nCEOC/16vWrlZqhtQPOkv/9qfEpSXeVeW5GQPtqDWjpyxrLOtfxe",
	"NxhVhMcV33EvAasx7mIFHjU1k9VyjxW4ZYJjdzHPSLJfPt0a5/vxBV4uge+omrl74PhOk9iRzBDJUoxD",
	"hq/21yAEXnYaqx9Uw7e23ejXbFXnI5aCXhADLBvdwT5M+Dq92Q3Tn9m9r0velc/dYPFN7Y21YWK1B7HJ",
	"tkuxxAIkWnC2RhhpaUUrwFzOAcvHYtrBYtocBCt40rOcbZvbLUY6YOWT9HbSyxwFOlM+HSkfy54ZOStF",
	"qy5pAxxujtxfpfb2HRS7AfV5GsL3KGjDSnU7Cn+dUt13UNSGlDQoZe0hljWICVt/eQNH4q9S2fsOitqA",
	"KgqlpD3w7fP6+v8HAAD//10BWQyR/QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /networks)
	GetNetworks(ctx echo.Context, params GetNetworksParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /nodes)
	GetNodes(ctx echo.Context, params GetNodesParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /objects)
	GetObjects(ctx echo.Context, params GetObjectsParams) error

	// (GET /pool/volumes)
	GetPoolVolumes(ctx echo.Context, params GetPoolVolumesParams) error

	// (GET /pools)
	GetPools(ctx echo.Context, params GetPoolsParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNetworks converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworks(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworks(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodes converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodesParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodes(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetObjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjects(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjects(ctx, params)
	return err
}

// GetPoolVolumes converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolumes(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolumes(ctx, params)
	return err
}

// GetPools converts echo context to params.
func (w *ServerInterfaceWrapper) GetPools(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPools(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/networks", wrapper.GetNetworks)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/nodes", wrapper.GetNodes)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/objects", wrapper.GetObjects)
	router.GET(baseURL+"/pool/volumes", wrapper.GetPoolVolumes)
	router.GET(baseURL+"/pools", wrapper.GetPools)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resources", wrapper.GetResources)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WJiX/e0TyR8+f/78+f8CAAD//9U8aH/n4gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

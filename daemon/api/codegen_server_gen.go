// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(ctx echo.Context, params PostAuthTokenParams) error

	// (POST /cluster/action/abort)
	PostClusterActionAbort(ctx echo.Context) error

	// (POST /cluster/action/freeze)
	PostClusterActionFreeze(ctx echo.Context) error

	// (POST /cluster/action/unfreeze)
	PostClusterActionUnfreeze(ctx echo.Context) error

	// (GET /daemon/dns/dump)
	GetDaemonDNSDump(ctx echo.Context) error

	// (GET /daemon/events)
	GetDaemonEvents(ctx echo.Context, params GetDaemonEventsParams) error

	// (POST /daemon/join)
	PostDaemonJoin(ctx echo.Context, params PostDaemonJoinParams) error

	// (POST /daemon/leave)
	PostDaemonLeave(ctx echo.Context, params PostDaemonLeaveParams) error

	// (POST /daemon/logs/control)
	PostDaemonLogsControl(ctx echo.Context) error

	// (POST /daemon/restart)
	PostDaemonRestart(ctx echo.Context) error

	// (GET /daemon/running)
	GetDaemonRunning(ctx echo.Context) error

	// (GET /daemon/status)
	GetDaemonStatus(ctx echo.Context, params GetDaemonStatusParams) error

	// (POST /daemon/stop)
	PostDaemonStop(ctx echo.Context) error

	// (POST /daemon/sub/action)
	PostDaemonSubAction(ctx echo.Context) error

	// (GET /instance)
	GetInstance(ctx echo.Context, params GetInstanceParams) error

	// (GET /instance/config)
	GetInstanceConfig(ctx echo.Context, params GetInstanceConfigParams) error

	// (GET /instance/monitor)
	GetInstanceMonitor(ctx echo.Context, params GetInstanceMonitorParams) error

	// (GET /instance/status)
	GetInstanceStatus(ctx echo.Context, params GetInstanceStatusParams) error

	// (POST /instance/status)
	PostInstanceStatus(ctx echo.Context) error

	// (GET /network)
	GetNetwork(ctx echo.Context, params GetNetworkParams) error

	// (GET /network/ip)
	GetNetworkIp(ctx echo.Context, params GetNetworkIpParams) error

	// (GET /node)
	GetNode(ctx echo.Context, params GetNodeParams) error

	// (POST /node/action/drain)
	PostNodeActionDrain(ctx echo.Context) error

	// (GET /node/backlogs)
	GetNodeBacklogs(ctx echo.Context, params GetNodeBacklogsParams) error

	// (POST /node/clear)
	PostNodeClear(ctx echo.Context) error

	// (GET /node/config)
	GetNodeConfig(ctx echo.Context, params GetNodeConfigParams) error

	// (GET /node/drbd/allocation)
	GetNodeDRBDAllocation(ctx echo.Context) error

	// (GET /node/drbd/config)
	GetNodeDRBDConfig(ctx echo.Context, params GetNodeDRBDConfigParams) error

	// (POST /node/drbd/config)
	PostNodeDRBDConfig(ctx echo.Context, params PostNodeDRBDConfigParams) error

	// (GET /node/logs)
	GetNodeLogs(ctx echo.Context, params GetNodeLogsParams) error

	// (GET /node/monitor)
	GetNodeMonitor(ctx echo.Context, params GetNodeMonitorParams) error

	// (GET /node/status)
	GetNodeStatus(ctx echo.Context, params GetNodeStatusParams) error

	// (GET /nodes/info)
	GetNodesInfo(ctx echo.Context) error

	// (GET /object)
	GetObject(ctx echo.Context, params GetObjectParams) error

	// (POST /object/action/abort)
	PostObjectActionAbort(ctx echo.Context) error

	// (POST /object/action/delete)
	PostObjectActionDelete(ctx echo.Context) error

	// (POST /object/action/freeze)
	PostObjectActionFreeze(ctx echo.Context) error

	// (POST /object/action/giveback)
	PostObjectActionGiveback(ctx echo.Context) error

	// (POST /object/action/provision)
	PostObjectActionProvision(ctx echo.Context) error

	// (POST /object/action/purge)
	PostObjectActionPurge(ctx echo.Context) error

	// (POST /object/action/start)
	PostObjectActionStart(ctx echo.Context) error

	// (POST /object/action/stop)
	PostObjectActionStop(ctx echo.Context) error

	// (POST /object/action/switch)
	PostObjectActionSwitch(ctx echo.Context) error

	// (POST /object/action/unfreeze)
	PostObjectActionUnfreeze(ctx echo.Context) error

	// (POST /object/action/unprovision)
	PostObjectActionUnprovision(ctx echo.Context) error

	// (GET /object/backlogs)
	GetObjectBacklogs(ctx echo.Context, params GetObjectBacklogsParams) error

	// (POST /object/clear)
	PostObjectClear(ctx echo.Context) error

	// (GET /object/config)
	GetObjectConfig(ctx echo.Context, params GetObjectConfigParams) error

	// (GET /object/file)
	GetObjectFile(ctx echo.Context, params GetObjectFileParams) error

	// (GET /object/logs)
	GetObjectLogs(ctx echo.Context, params GetObjectLogsParams) error

	// (GET /object/paths)
	GetObjectPaths(ctx echo.Context, params GetObjectPathsParams) error

	// (POST /object/progress)
	PostObjectProgress(ctx echo.Context) error

	// (GET /pool)
	GetPool(ctx echo.Context, params GetPoolParams) error

	// (GET /pool/volume)
	GetPoolVolume(ctx echo.Context, params GetPoolVolumeParams) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /relay/message)
	GetRelayMessage(ctx echo.Context, params GetRelayMessageParams) error

	// (POST /relay/message)
	PostRelayMessage(ctx echo.Context) error

	// (GET /resource)
	GetResource(ctx echo.Context, params GetResourceParams) error

	// (GET /resource/config)
	GetResourceConfig(ctx echo.Context, params GetResourceConfigParams) error

	// (GET /resource/monitor)
	GetResourceMonitor(ctx echo.Context, params GetResourceMonitorParams) error

	// (GET /resource/status)
	GetResourceStatus(ctx echo.Context, params GetResourceStatusParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAuthToken converts echo context to params.
func (w *ServerInterfaceWrapper) PostAuthToken(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostAuthTokenParams
	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAuthToken(ctx, params)
	return err
}

// PostClusterActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionAbort(ctx)
	return err
}

// PostClusterActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionFreeze(ctx)
	return err
}

// PostClusterActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostClusterActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClusterActionUnfreeze(ctx)
	return err
}

// GetDaemonDNSDump converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonDNSDump(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonDNSDump(ctx)
	return err
}

// GetDaemonEvents converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonEvents(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonEventsParams
	// ------------- Optional query parameter "duration" -------------

	err = runtime.BindQueryParameter("form", true, false, "duration", ctx.QueryParams(), &params.Duration)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter duration: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonEvents(ctx, params)
	return err
}

// PostDaemonJoin converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonJoin(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonJoinParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonJoin(ctx, params)
	return err
}

// PostDaemonLeave converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLeave(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonLeaveParams
	// ------------- Required query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, true, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLeave(ctx, params)
	return err
}

// PostDaemonLogsControl converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonLogsControl(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonLogsControl(ctx)
	return err
}

// PostDaemonRestart converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonRestart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonRestart(ctx)
	return err
}

// GetDaemonRunning converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonRunning(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonRunning(ctx)
	return err
}

// GetDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams
	// ------------- Optional query parameter "namespace" -------------

	err = runtime.BindQueryParameter("form", true, false, "namespace", ctx.QueryParams(), &params.Namespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter namespace: %s", err))
	}

	// ------------- Optional query parameter "selector" -------------

	err = runtime.BindQueryParameter("form", true, false, "selector", ctx.QueryParams(), &params.Selector)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selector: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDaemonStatus(ctx, params)
	return err
}

// PostDaemonStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonStop(ctx)
	return err
}

// PostDaemonSubAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSubAction(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostDaemonSubAction(ctx)
	return err
}

// GetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstance(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstance(ctx, params)
	return err
}

// GetInstanceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceConfig(ctx, params)
	return err
}

// GetInstanceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceMonitor(ctx, params)
	return err
}

// GetInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstanceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetInstanceStatus(ctx, params)
	return err
}

// PostInstanceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstanceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostInstanceStatus(ctx)
	return err
}

// GetNetwork converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetwork(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetwork(ctx, params)
	return err
}

// GetNetworkIp converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkIp(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkIpParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkIp(ctx, params)
	return err
}

// GetNode converts echo context to params.
func (w *ServerInterfaceWrapper) GetNode(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNode(ctx, params)
	return err
}

// PostNodeActionDrain converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeActionDrain(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeActionDrain(ctx)
	return err
}

// GetNodeBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeBacklogs(ctx, params)
	return err
}

// PostNodeClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeClear(ctx)
	return err
}

// GetNodeConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeConfigParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeConfig(ctx, params)
	return err
}

// GetNodeDRBDAllocation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDAllocation(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDAllocation(ctx)
	return err
}

// GetNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeDRBDConfig(ctx, params)
	return err
}

// PostNodeDRBDConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostNodeDRBDConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostNodeDRBDConfigParams
	// ------------- Required query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, true, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostNodeDRBDConfig(ctx, params)
	return err
}

// GetNodeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeLogs(ctx, params)
	return err
}

// GetNodeMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeMonitorParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeMonitor(ctx, params)
	return err
}

// GetNodeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodeStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNodeStatusParams
	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodeStatus(ctx, params)
	return err
}

// GetNodesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetNodesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNodesInfo(ctx)
	return err
}

// GetObject converts echo context to params.
func (w *ServerInterfaceWrapper) GetObject(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObject(ctx, params)
	return err
}

// PostObjectActionAbort converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionAbort(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionAbort(ctx)
	return err
}

// PostObjectActionDelete converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionDelete(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionDelete(ctx)
	return err
}

// PostObjectActionFreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionFreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionFreeze(ctx)
	return err
}

// PostObjectActionGiveback converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionGiveback(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionGiveback(ctx)
	return err
}

// PostObjectActionProvision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionProvision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionProvision(ctx)
	return err
}

// PostObjectActionPurge converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionPurge(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionPurge(ctx)
	return err
}

// PostObjectActionStart converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStart(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStart(ctx)
	return err
}

// PostObjectActionStop converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionStop(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionStop(ctx)
	return err
}

// PostObjectActionSwitch converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionSwitch(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionSwitch(ctx)
	return err
}

// PostObjectActionUnfreeze converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnfreeze(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnfreeze(ctx)
	return err
}

// PostObjectActionUnprovision converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectActionUnprovision(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectActionUnprovision(ctx)
	return err
}

// GetObjectBacklogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectBacklogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectBacklogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectBacklogs(ctx, params)
	return err
}

// PostObjectClear converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectClear(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectClear(ctx)
	return err
}

// GetObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "evaluate" -------------

	err = runtime.BindQueryParameter("form", true, false, "evaluate", ctx.QueryParams(), &params.Evaluate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter evaluate: %s", err))
	}

	// ------------- Optional query parameter "impersonate" -------------

	err = runtime.BindQueryParameter("form", true, false, "impersonate", ctx.QueryParams(), &params.Impersonate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter impersonate: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectConfig(ctx, params)
	return err
}

// GetObjectFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectFile(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectFile(ctx, params)
	return err
}

// GetObjectLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectLogs(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectLogsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Required query parameter "paths" -------------

	err = runtime.BindQueryParameter("form", true, true, "paths", ctx.QueryParams(), &params.Paths)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter paths: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectLogs(ctx, params)
	return err
}

// GetObjectPaths converts echo context to params.
func (w *ServerInterfaceWrapper) GetObjectPaths(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectPathsParams
	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetObjectPaths(ctx, params)
	return err
}

// PostObjectProgress converts echo context to params.
func (w *ServerInterfaceWrapper) PostObjectProgress(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostObjectProgress(ctx)
	return err
}

// GetPool converts echo context to params.
func (w *ServerInterfaceWrapper) GetPool(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPool(ctx, params)
	return err
}

// GetPoolVolume converts echo context to params.
func (w *ServerInterfaceWrapper) GetPoolVolume(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPoolVolumeParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetPoolVolume(ctx, params)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) GetRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRelayMessageParams
	// ------------- Optional query parameter "nodename" -------------

	err = runtime.BindQueryParameter("form", true, false, "nodename", ctx.QueryParams(), &params.Nodename)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nodename: %s", err))
	}

	// ------------- Optional query parameter "cluster_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "cluster_id", ctx.QueryParams(), &params.ClusterId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cluster_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRelayMessage(ctx, params)
	return err
}

// PostRelayMessage converts echo context to params.
func (w *ServerInterfaceWrapper) PostRelayMessage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRelayMessage(ctx)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, params)
	return err
}

// GetResourceConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceConfigParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceConfig(ctx, params)
	return err
}

// GetResourceMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceMonitorParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceMonitor(ctx, params)
	return err
}

// GetResourceStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetResourceStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{""})

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourceStatusParams
	// ------------- Optional query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, false, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "node" -------------

	err = runtime.BindQueryParameter("form", true, false, "node", ctx.QueryParams(), &params.Node)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter node: %s", err))
	}

	// ------------- Optional query parameter "resource" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource", ctx.QueryParams(), &params.Resource)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResourceStatus(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/token", wrapper.PostAuthToken)
	router.POST(baseURL+"/cluster/action/abort", wrapper.PostClusterActionAbort)
	router.POST(baseURL+"/cluster/action/freeze", wrapper.PostClusterActionFreeze)
	router.POST(baseURL+"/cluster/action/unfreeze", wrapper.PostClusterActionUnfreeze)
	router.GET(baseURL+"/daemon/dns/dump", wrapper.GetDaemonDNSDump)
	router.GET(baseURL+"/daemon/events", wrapper.GetDaemonEvents)
	router.POST(baseURL+"/daemon/join", wrapper.PostDaemonJoin)
	router.POST(baseURL+"/daemon/leave", wrapper.PostDaemonLeave)
	router.POST(baseURL+"/daemon/logs/control", wrapper.PostDaemonLogsControl)
	router.POST(baseURL+"/daemon/restart", wrapper.PostDaemonRestart)
	router.GET(baseURL+"/daemon/running", wrapper.GetDaemonRunning)
	router.GET(baseURL+"/daemon/status", wrapper.GetDaemonStatus)
	router.POST(baseURL+"/daemon/stop", wrapper.PostDaemonStop)
	router.POST(baseURL+"/daemon/sub/action", wrapper.PostDaemonSubAction)
	router.GET(baseURL+"/instance", wrapper.GetInstance)
	router.GET(baseURL+"/instance/config", wrapper.GetInstanceConfig)
	router.GET(baseURL+"/instance/monitor", wrapper.GetInstanceMonitor)
	router.GET(baseURL+"/instance/status", wrapper.GetInstanceStatus)
	router.POST(baseURL+"/instance/status", wrapper.PostInstanceStatus)
	router.GET(baseURL+"/network", wrapper.GetNetwork)
	router.GET(baseURL+"/network/ip", wrapper.GetNetworkIp)
	router.GET(baseURL+"/node", wrapper.GetNode)
	router.POST(baseURL+"/node/action/drain", wrapper.PostNodeActionDrain)
	router.GET(baseURL+"/node/backlogs", wrapper.GetNodeBacklogs)
	router.POST(baseURL+"/node/clear", wrapper.PostNodeClear)
	router.GET(baseURL+"/node/config", wrapper.GetNodeConfig)
	router.GET(baseURL+"/node/drbd/allocation", wrapper.GetNodeDRBDAllocation)
	router.GET(baseURL+"/node/drbd/config", wrapper.GetNodeDRBDConfig)
	router.POST(baseURL+"/node/drbd/config", wrapper.PostNodeDRBDConfig)
	router.GET(baseURL+"/node/logs", wrapper.GetNodeLogs)
	router.GET(baseURL+"/node/monitor", wrapper.GetNodeMonitor)
	router.GET(baseURL+"/node/status", wrapper.GetNodeStatus)
	router.GET(baseURL+"/nodes/info", wrapper.GetNodesInfo)
	router.GET(baseURL+"/object", wrapper.GetObject)
	router.POST(baseURL+"/object/action/abort", wrapper.PostObjectActionAbort)
	router.POST(baseURL+"/object/action/delete", wrapper.PostObjectActionDelete)
	router.POST(baseURL+"/object/action/freeze", wrapper.PostObjectActionFreeze)
	router.POST(baseURL+"/object/action/giveback", wrapper.PostObjectActionGiveback)
	router.POST(baseURL+"/object/action/provision", wrapper.PostObjectActionProvision)
	router.POST(baseURL+"/object/action/purge", wrapper.PostObjectActionPurge)
	router.POST(baseURL+"/object/action/start", wrapper.PostObjectActionStart)
	router.POST(baseURL+"/object/action/stop", wrapper.PostObjectActionStop)
	router.POST(baseURL+"/object/action/switch", wrapper.PostObjectActionSwitch)
	router.POST(baseURL+"/object/action/unfreeze", wrapper.PostObjectActionUnfreeze)
	router.POST(baseURL+"/object/action/unprovision", wrapper.PostObjectActionUnprovision)
	router.GET(baseURL+"/object/backlogs", wrapper.GetObjectBacklogs)
	router.POST(baseURL+"/object/clear", wrapper.PostObjectClear)
	router.GET(baseURL+"/object/config", wrapper.GetObjectConfig)
	router.GET(baseURL+"/object/file", wrapper.GetObjectFile)
	router.GET(baseURL+"/object/logs", wrapper.GetObjectLogs)
	router.GET(baseURL+"/object/paths", wrapper.GetObjectPaths)
	router.POST(baseURL+"/object/progress", wrapper.PostObjectProgress)
	router.GET(baseURL+"/pool", wrapper.GetPool)
	router.GET(baseURL+"/pool/volume", wrapper.GetPoolVolume)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/relay/message", wrapper.GetRelayMessage)
	router.POST(baseURL+"/relay/message", wrapper.PostRelayMessage)
	router.GET(baseURL+"/resource", wrapper.GetResource)
	router.GET(baseURL+"/resource/config", wrapper.GetResourceConfig)
	router.GET(baseURL+"/resource/monitor", wrapper.GetResourceMonitor)
	router.GET(baseURL+"/resource/status", wrapper.GetResourceStatus)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1dX/BQAA//+sqKWyqPsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthToken request
	PostAuthToken(ctx context.Context, params *PostAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDaemonDNSDump request
	GetDaemonDNSDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDaemonEvents request
	GetDaemonEvents(ctx context.Context, params *GetDaemonEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDaemonJoin request
	PostDaemonJoin(ctx context.Context, params *PostDaemonJoinParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDaemonLeave request
	PostDaemonLeave(ctx context.Context, params *PostDaemonLeaveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDaemonLogsControl request with any body
	PostDaemonLogsControlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDaemonLogsControl(ctx context.Context, body PostDaemonLogsControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDaemonRunning request
	GetDaemonRunning(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDaemonStatus request
	GetDaemonStatus(ctx context.Context, params *GetDaemonStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDaemonStop request
	PostDaemonStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDaemonSubAction request with any body
	PostDaemonSubActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDaemonSubAction(ctx context.Context, body PostDaemonSubActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstanceStatus request with any body
	PostInstanceStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstanceStatus(ctx context.Context, body PostInstanceStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNodeClear request
	PostNodeClear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeDrbdAllocation request
	GetNodeDrbdAllocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeDrbdConfig request
	GetNodeDrbdConfig(ctx context.Context, params *GetNodeDrbdConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNodeDrbdConfig request with any body
	PostNodeDrbdConfigWithBody(ctx context.Context, params *PostNodeDrbdConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNodeDrbdConfig(ctx context.Context, params *PostNodeDrbdConfigParams, body PostNodeDrbdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNodeMonitor request with any body
	PostNodeMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNodeMonitor(ctx context.Context, body PostNodeMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodesInfo request
	GetNodesInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectAbort request with any body
	PostObjectAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectAbort(ctx context.Context, body PostObjectAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectClear request with any body
	PostObjectClearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectClear(ctx context.Context, body PostObjectClearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectConfig request
	GetObjectConfig(ctx context.Context, params *GetObjectConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectFile request
	GetObjectFile(ctx context.Context, params *GetObjectFileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectMonitor request with any body
	PostObjectMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectMonitor(ctx context.Context, body PostObjectMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectProgress request with any body
	PostObjectProgressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectProgress(ctx context.Context, body PostObjectProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectSelector request
	GetObjectSelector(ctx context.Context, params *GetObjectSelectorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectSwitchTo request with any body
	PostObjectSwitchToWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjectSwitchTo(ctx context.Context, body PostObjectSwitchToJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSwagger request
	GetSwagger(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRelayMessage request
	GetRelayMessage(ctx context.Context, params *GetRelayMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRelayMessage request with any body
	PostRelayMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRelayMessage(ctx context.Context, body PostRelayMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthToken(ctx context.Context, params *PostAuthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDaemonDNSDump(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDaemonDNSDumpRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDaemonEvents(ctx context.Context, params *GetDaemonEventsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDaemonEventsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonJoin(ctx context.Context, params *PostDaemonJoinParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonJoinRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonLeave(ctx context.Context, params *PostDaemonLeaveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonLeaveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonLogsControlWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonLogsControlRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonLogsControl(ctx context.Context, body PostDaemonLogsControlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonLogsControlRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDaemonRunning(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDaemonRunningRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDaemonStatus(ctx context.Context, params *GetDaemonStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDaemonStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonStop(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonStopRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonSubActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonSubActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDaemonSubAction(ctx context.Context, body PostDaemonSubActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDaemonSubActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstanceStatusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstanceStatusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstanceStatus(ctx context.Context, body PostInstanceStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstanceStatusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodeClear(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodeClearRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeDrbdAllocation(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeDrbdAllocationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeDrbdConfig(ctx context.Context, params *GetNodeDrbdConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeDrbdConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodeDrbdConfigWithBody(ctx context.Context, params *PostNodeDrbdConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodeDrbdConfigRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodeDrbdConfig(ctx context.Context, params *PostNodeDrbdConfigParams, body PostNodeDrbdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodeDrbdConfigRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodeMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodeMonitorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNodeMonitor(ctx context.Context, body PostNodeMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNodeMonitorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodesInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodesInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectAbortWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectAbortRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectAbort(ctx context.Context, body PostObjectAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectAbortRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectClearWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectClearRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectClear(ctx context.Context, body PostObjectClearJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectClearRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectConfig(ctx context.Context, params *GetObjectConfigParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectConfigRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectFile(ctx context.Context, params *GetObjectFileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectFileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectMonitorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectMonitor(ctx context.Context, body PostObjectMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectMonitorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectProgressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectProgressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectProgress(ctx context.Context, body PostObjectProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectProgressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectSelector(ctx context.Context, params *GetObjectSelectorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectSelectorRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectSwitchToWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectSwitchToRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectSwitchTo(ctx context.Context, body PostObjectSwitchToJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectSwitchToRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSwagger(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSwaggerRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRelayMessage(ctx context.Context, params *GetRelayMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRelayMessageRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelayMessageWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelayMessageRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelayMessage(ctx context.Context, body PostRelayMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelayMessageRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthTokenRequest generates requests for PostAuthToken
func NewPostAuthTokenRequest(server string, params *PostAuthTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Role != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "role", runtime.ParamLocationQuery, *params.Role); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Duration != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, *params.Duration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDaemonDNSDumpRequest generates requests for GetDaemonDNSDump
func NewGetDaemonDNSDumpRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/dns/dump")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDaemonEventsRequest generates requests for GetDaemonEvents
func NewGetDaemonEventsRequest(server string, params *GetDaemonEventsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Duration != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "duration", runtime.ParamLocationQuery, *params.Duration); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDaemonJoinRequest generates requests for PostDaemonJoin
func NewPostDaemonJoinRequest(server string, params *PostDaemonJoinParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/join")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node", runtime.ParamLocationQuery, params.Node); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDaemonLeaveRequest generates requests for PostDaemonLeave
func NewPostDaemonLeaveRequest(server string, params *PostDaemonLeaveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/leave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "node", runtime.ParamLocationQuery, params.Node); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDaemonLogsControlRequest calls the generic PostDaemonLogsControl builder with application/json body
func NewPostDaemonLogsControlRequest(server string, body PostDaemonLogsControlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDaemonLogsControlRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDaemonLogsControlRequestWithBody generates requests for PostDaemonLogsControl with any type of body
func NewPostDaemonLogsControlRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/logs/control")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDaemonRunningRequest generates requests for GetDaemonRunning
func NewGetDaemonRunningRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/running")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDaemonStatusRequest generates requests for GetDaemonStatus
func NewGetDaemonStatusRequest(server string, params *GetDaemonStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Namespace != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "namespace", runtime.ParamLocationQuery, *params.Namespace); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Relatives != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "relatives", runtime.ParamLocationQuery, *params.Relatives); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Selector != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selector", runtime.ParamLocationQuery, *params.Selector); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDaemonStopRequest generates requests for PostDaemonStop
func NewPostDaemonStopRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/stop")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostDaemonSubActionRequest calls the generic PostDaemonSubAction builder with application/json body
func NewPostDaemonSubActionRequest(server string, body PostDaemonSubActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDaemonSubActionRequestWithBody(server, "application/json", bodyReader)
}

// NewPostDaemonSubActionRequestWithBody generates requests for PostDaemonSubAction with any type of body
func NewPostDaemonSubActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/daemon/sub/action")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostInstanceStatusRequest calls the generic PostInstanceStatus builder with application/json body
func NewPostInstanceStatusRequest(server string, body PostInstanceStatusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstanceStatusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstanceStatusRequestWithBody generates requests for PostInstanceStatus with any type of body
func NewPostInstanceStatusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instance/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNodeClearRequest generates requests for PostNodeClear
func NewPostNodeClearRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/node/clear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeDrbdAllocationRequest generates requests for GetNodeDrbdAllocation
func NewGetNodeDrbdAllocationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/node/drbd/allocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeDrbdConfigRequest generates requests for GetNodeDrbdConfig
func NewGetNodeDrbdConfigRequest(server string, params *GetNodeDrbdConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/node/drbd/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNodeDrbdConfigRequest calls the generic PostNodeDrbdConfig builder with application/json body
func NewPostNodeDrbdConfigRequest(server string, params *PostNodeDrbdConfigParams, body PostNodeDrbdConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNodeDrbdConfigRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostNodeDrbdConfigRequestWithBody generates requests for PostNodeDrbdConfig with any type of body
func NewPostNodeDrbdConfigRequestWithBody(server string, params *PostNodeDrbdConfigParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/node/drbd/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNodeMonitorRequest calls the generic PostNodeMonitor builder with application/json body
func NewPostNodeMonitorRequest(server string, body PostNodeMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNodeMonitorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNodeMonitorRequestWithBody generates requests for PostNodeMonitor with any type of body
func NewPostNodeMonitorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/node/monitor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNodesInfoRequest generates requests for GetNodesInfo
func NewGetNodesInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectAbortRequest calls the generic PostObjectAbort builder with application/json body
func NewPostObjectAbortRequest(server string, body PostObjectAbortJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectAbortRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectAbortRequestWithBody generates requests for PostObjectAbort with any type of body
func NewPostObjectAbortRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/abort")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObjectClearRequest calls the generic PostObjectClear builder with application/json body
func NewPostObjectClearRequest(server string, body PostObjectClearJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectClearRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectClearRequestWithBody generates requests for PostObjectClear with any type of body
func NewPostObjectClearRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/clear")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectConfigRequest generates requests for GetObjectConfig
func NewGetObjectConfigRequest(server string, params *GetObjectConfigParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Evaluate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "evaluate", runtime.ParamLocationQuery, *params.Evaluate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Impersonate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "impersonate", runtime.ParamLocationQuery, *params.Impersonate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectFileRequest generates requests for GetObjectFile
func NewGetObjectFileRequest(server string, params *GetObjectFileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/file")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, params.Path); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectMonitorRequest calls the generic PostObjectMonitor builder with application/json body
func NewPostObjectMonitorRequest(server string, body PostObjectMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectMonitorRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectMonitorRequestWithBody generates requests for PostObjectMonitor with any type of body
func NewPostObjectMonitorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/monitor")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostObjectProgressRequest calls the generic PostObjectProgress builder with application/json body
func NewPostObjectProgressRequest(server string, body PostObjectProgressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectProgressRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectProgressRequestWithBody generates requests for PostObjectProgress with any type of body
func NewPostObjectProgressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/progress")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetObjectSelectorRequest generates requests for GetObjectSelector
func NewGetObjectSelectorRequest(server string, params *GetObjectSelectorParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/selector")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "selector", runtime.ParamLocationQuery, params.Selector); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectSwitchToRequest calls the generic PostObjectSwitchTo builder with application/json body
func NewPostObjectSwitchToRequest(server string, body PostObjectSwitchToJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectSwitchToRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectSwitchToRequestWithBody generates requests for PostObjectSwitchTo with any type of body
func NewPostObjectSwitchToRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/object/switchTo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSwaggerRequest generates requests for GetSwagger
func NewGetSwaggerRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/public/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRelayMessageRequest generates requests for GetRelayMessage
func NewGetRelayMessageRequest(server string, params *GetRelayMessageParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relay/message")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Nodename != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nodename", runtime.ParamLocationQuery, *params.Nodename); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClusterId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cluster_id", runtime.ParamLocationQuery, *params.ClusterId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRelayMessageRequest calls the generic PostRelayMessage builder with application/json body
func NewPostRelayMessageRequest(server string, body PostRelayMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRelayMessageRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRelayMessageRequestWithBody generates requests for PostRelayMessage with any type of body
func NewPostRelayMessageRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relay/message")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthToken request
	PostAuthTokenWithResponse(ctx context.Context, params *PostAuthTokenParams, reqEditors ...RequestEditorFn) (*PostAuthTokenResponse, error)

	// GetDaemonDNSDump request
	GetDaemonDNSDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaemonDNSDumpResponse, error)

	// GetDaemonEvents request
	GetDaemonEventsWithResponse(ctx context.Context, params *GetDaemonEventsParams, reqEditors ...RequestEditorFn) (*GetDaemonEventsResponse, error)

	// PostDaemonJoin request
	PostDaemonJoinWithResponse(ctx context.Context, params *PostDaemonJoinParams, reqEditors ...RequestEditorFn) (*PostDaemonJoinResponse, error)

	// PostDaemonLeave request
	PostDaemonLeaveWithResponse(ctx context.Context, params *PostDaemonLeaveParams, reqEditors ...RequestEditorFn) (*PostDaemonLeaveResponse, error)

	// PostDaemonLogsControl request with any body
	PostDaemonLogsControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDaemonLogsControlResponse, error)

	PostDaemonLogsControlWithResponse(ctx context.Context, body PostDaemonLogsControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDaemonLogsControlResponse, error)

	// GetDaemonRunning request
	GetDaemonRunningWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaemonRunningResponse, error)

	// GetDaemonStatus request
	GetDaemonStatusWithResponse(ctx context.Context, params *GetDaemonStatusParams, reqEditors ...RequestEditorFn) (*GetDaemonStatusResponse, error)

	// PostDaemonStop request
	PostDaemonStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDaemonStopResponse, error)

	// PostDaemonSubAction request with any body
	PostDaemonSubActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDaemonSubActionResponse, error)

	PostDaemonSubActionWithResponse(ctx context.Context, body PostDaemonSubActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDaemonSubActionResponse, error)

	// PostInstanceStatus request with any body
	PostInstanceStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstanceStatusResponse, error)

	PostInstanceStatusWithResponse(ctx context.Context, body PostInstanceStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstanceStatusResponse, error)

	// PostNodeClear request
	PostNodeClearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostNodeClearResponse, error)

	// GetNodeDrbdAllocation request
	GetNodeDrbdAllocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodeDrbdAllocationResponse, error)

	// GetNodeDrbdConfig request
	GetNodeDrbdConfigWithResponse(ctx context.Context, params *GetNodeDrbdConfigParams, reqEditors ...RequestEditorFn) (*GetNodeDrbdConfigResponse, error)

	// PostNodeDrbdConfig request with any body
	PostNodeDrbdConfigWithBodyWithResponse(ctx context.Context, params *PostNodeDrbdConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodeDrbdConfigResponse, error)

	PostNodeDrbdConfigWithResponse(ctx context.Context, params *PostNodeDrbdConfigParams, body PostNodeDrbdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodeDrbdConfigResponse, error)

	// PostNodeMonitor request with any body
	PostNodeMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodeMonitorResponse, error)

	PostNodeMonitorWithResponse(ctx context.Context, body PostNodeMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodeMonitorResponse, error)

	// GetNodesInfo request
	GetNodesInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesInfoResponse, error)

	// PostObjectAbort request with any body
	PostObjectAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectAbortResponse, error)

	PostObjectAbortWithResponse(ctx context.Context, body PostObjectAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectAbortResponse, error)

	// PostObjectClear request with any body
	PostObjectClearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectClearResponse, error)

	PostObjectClearWithResponse(ctx context.Context, body PostObjectClearJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectClearResponse, error)

	// GetObjectConfig request
	GetObjectConfigWithResponse(ctx context.Context, params *GetObjectConfigParams, reqEditors ...RequestEditorFn) (*GetObjectConfigResponse, error)

	// GetObjectFile request
	GetObjectFileWithResponse(ctx context.Context, params *GetObjectFileParams, reqEditors ...RequestEditorFn) (*GetObjectFileResponse, error)

	// PostObjectMonitor request with any body
	PostObjectMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectMonitorResponse, error)

	PostObjectMonitorWithResponse(ctx context.Context, body PostObjectMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectMonitorResponse, error)

	// PostObjectProgress request with any body
	PostObjectProgressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectProgressResponse, error)

	PostObjectProgressWithResponse(ctx context.Context, body PostObjectProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectProgressResponse, error)

	// GetObjectSelector request
	GetObjectSelectorWithResponse(ctx context.Context, params *GetObjectSelectorParams, reqEditors ...RequestEditorFn) (*GetObjectSelectorResponse, error)

	// PostObjectSwitchTo request with any body
	PostObjectSwitchToWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectSwitchToResponse, error)

	PostObjectSwitchToWithResponse(ctx context.Context, body PostObjectSwitchToJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectSwitchToResponse, error)

	// GetSwagger request
	GetSwaggerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerResponse, error)

	// GetRelayMessage request
	GetRelayMessageWithResponse(ctx context.Context, params *GetRelayMessageParams, reqEditors ...RequestEditorFn) (*GetRelayMessageResponse, error)

	// PostRelayMessage request with any body
	PostRelayMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelayMessageResponse, error)

	PostRelayMessageWithResponse(ctx context.Context, body PostRelayMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelayMessageResponse, error)
}

type PostAuthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponsePostAuthToken
}

// Status returns HTTPResponse.Status
func (r PostAuthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDaemonDNSDumpResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DnsZone
}

// Status returns HTTPResponse.Status
func (r GetDaemonDNSDumpResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDaemonDNSDumpResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDaemonEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDaemonEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDaemonEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDaemonJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDaemonJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDaemonJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDaemonLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostDaemonLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDaemonLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDaemonLogsControlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseText
}

// Status returns HTTPResponse.Status
func (r PostDaemonLogsControlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDaemonLogsControlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDaemonRunningResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseMuxBool
}

// Status returns HTTPResponse.Status
func (r GetDaemonRunningResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDaemonRunningResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDaemonStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseDaemonStatus
}

// Status returns HTTPResponse.Status
func (r GetDaemonStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDaemonStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDaemonStopResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseText
}

// Status returns HTTPResponse.Status
func (r PostDaemonStopResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDaemonStopResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDaemonSubActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseText
}

// Status returns HTTPResponse.Status
func (r PostDaemonSubActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDaemonSubActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstanceStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostInstanceStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstanceStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNodeClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNodeClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNodeClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeDrbdAllocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DrbdAllocation
}

// Status returns HTTPResponse.Status
func (r GetNodeDrbdAllocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeDrbdAllocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeDrbdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseGetNodeDrbdConfig
}

// Status returns HTTPResponse.Status
func (r GetNodeDrbdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeDrbdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNodeDrbdConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostNodeDrbdConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNodeDrbdConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNodeMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResponseInfoStatus
}

// Status returns HTTPResponse.Status
func (r PostNodeMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNodeMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NodesInfo
}

// Status returns HTTPResponse.Status
func (r GetNodesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectAbortResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectAbortResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectAbortResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectClearResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectClearResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectClearResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectConfig
}

// Status returns HTTPResponse.Status
func (r GetObjectConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectFile
}

// Status returns HTTPResponse.Status
func (r GetObjectFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectProgressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectProgressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectProgressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectSelectorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ObjectSelector
}

// Status returns HTTPResponse.Status
func (r GetObjectSelectorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectSelectorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectSwitchToResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectSwitchToResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectSwitchToResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSwaggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetSwaggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSwaggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRelayMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RelayMessages
}

// Status returns HTTPResponse.Status
func (r GetRelayMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRelayMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRelayMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRelayMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRelayMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthTokenWithResponse request returning *PostAuthTokenResponse
func (c *ClientWithResponses) PostAuthTokenWithResponse(ctx context.Context, params *PostAuthTokenParams, reqEditors ...RequestEditorFn) (*PostAuthTokenResponse, error) {
	rsp, err := c.PostAuthToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthTokenResponse(rsp)
}

// GetDaemonDNSDumpWithResponse request returning *GetDaemonDNSDumpResponse
func (c *ClientWithResponses) GetDaemonDNSDumpWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaemonDNSDumpResponse, error) {
	rsp, err := c.GetDaemonDNSDump(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDaemonDNSDumpResponse(rsp)
}

// GetDaemonEventsWithResponse request returning *GetDaemonEventsResponse
func (c *ClientWithResponses) GetDaemonEventsWithResponse(ctx context.Context, params *GetDaemonEventsParams, reqEditors ...RequestEditorFn) (*GetDaemonEventsResponse, error) {
	rsp, err := c.GetDaemonEvents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDaemonEventsResponse(rsp)
}

// PostDaemonJoinWithResponse request returning *PostDaemonJoinResponse
func (c *ClientWithResponses) PostDaemonJoinWithResponse(ctx context.Context, params *PostDaemonJoinParams, reqEditors ...RequestEditorFn) (*PostDaemonJoinResponse, error) {
	rsp, err := c.PostDaemonJoin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonJoinResponse(rsp)
}

// PostDaemonLeaveWithResponse request returning *PostDaemonLeaveResponse
func (c *ClientWithResponses) PostDaemonLeaveWithResponse(ctx context.Context, params *PostDaemonLeaveParams, reqEditors ...RequestEditorFn) (*PostDaemonLeaveResponse, error) {
	rsp, err := c.PostDaemonLeave(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonLeaveResponse(rsp)
}

// PostDaemonLogsControlWithBodyWithResponse request with arbitrary body returning *PostDaemonLogsControlResponse
func (c *ClientWithResponses) PostDaemonLogsControlWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDaemonLogsControlResponse, error) {
	rsp, err := c.PostDaemonLogsControlWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonLogsControlResponse(rsp)
}

func (c *ClientWithResponses) PostDaemonLogsControlWithResponse(ctx context.Context, body PostDaemonLogsControlJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDaemonLogsControlResponse, error) {
	rsp, err := c.PostDaemonLogsControl(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonLogsControlResponse(rsp)
}

// GetDaemonRunningWithResponse request returning *GetDaemonRunningResponse
func (c *ClientWithResponses) GetDaemonRunningWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDaemonRunningResponse, error) {
	rsp, err := c.GetDaemonRunning(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDaemonRunningResponse(rsp)
}

// GetDaemonStatusWithResponse request returning *GetDaemonStatusResponse
func (c *ClientWithResponses) GetDaemonStatusWithResponse(ctx context.Context, params *GetDaemonStatusParams, reqEditors ...RequestEditorFn) (*GetDaemonStatusResponse, error) {
	rsp, err := c.GetDaemonStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDaemonStatusResponse(rsp)
}

// PostDaemonStopWithResponse request returning *PostDaemonStopResponse
func (c *ClientWithResponses) PostDaemonStopWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostDaemonStopResponse, error) {
	rsp, err := c.PostDaemonStop(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonStopResponse(rsp)
}

// PostDaemonSubActionWithBodyWithResponse request with arbitrary body returning *PostDaemonSubActionResponse
func (c *ClientWithResponses) PostDaemonSubActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDaemonSubActionResponse, error) {
	rsp, err := c.PostDaemonSubActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonSubActionResponse(rsp)
}

func (c *ClientWithResponses) PostDaemonSubActionWithResponse(ctx context.Context, body PostDaemonSubActionJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDaemonSubActionResponse, error) {
	rsp, err := c.PostDaemonSubAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDaemonSubActionResponse(rsp)
}

// PostInstanceStatusWithBodyWithResponse request with arbitrary body returning *PostInstanceStatusResponse
func (c *ClientWithResponses) PostInstanceStatusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstanceStatusResponse, error) {
	rsp, err := c.PostInstanceStatusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstanceStatusResponse(rsp)
}

func (c *ClientWithResponses) PostInstanceStatusWithResponse(ctx context.Context, body PostInstanceStatusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstanceStatusResponse, error) {
	rsp, err := c.PostInstanceStatus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstanceStatusResponse(rsp)
}

// PostNodeClearWithResponse request returning *PostNodeClearResponse
func (c *ClientWithResponses) PostNodeClearWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostNodeClearResponse, error) {
	rsp, err := c.PostNodeClear(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodeClearResponse(rsp)
}

// GetNodeDrbdAllocationWithResponse request returning *GetNodeDrbdAllocationResponse
func (c *ClientWithResponses) GetNodeDrbdAllocationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodeDrbdAllocationResponse, error) {
	rsp, err := c.GetNodeDrbdAllocation(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeDrbdAllocationResponse(rsp)
}

// GetNodeDrbdConfigWithResponse request returning *GetNodeDrbdConfigResponse
func (c *ClientWithResponses) GetNodeDrbdConfigWithResponse(ctx context.Context, params *GetNodeDrbdConfigParams, reqEditors ...RequestEditorFn) (*GetNodeDrbdConfigResponse, error) {
	rsp, err := c.GetNodeDrbdConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeDrbdConfigResponse(rsp)
}

// PostNodeDrbdConfigWithBodyWithResponse request with arbitrary body returning *PostNodeDrbdConfigResponse
func (c *ClientWithResponses) PostNodeDrbdConfigWithBodyWithResponse(ctx context.Context, params *PostNodeDrbdConfigParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodeDrbdConfigResponse, error) {
	rsp, err := c.PostNodeDrbdConfigWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodeDrbdConfigResponse(rsp)
}

func (c *ClientWithResponses) PostNodeDrbdConfigWithResponse(ctx context.Context, params *PostNodeDrbdConfigParams, body PostNodeDrbdConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodeDrbdConfigResponse, error) {
	rsp, err := c.PostNodeDrbdConfig(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodeDrbdConfigResponse(rsp)
}

// PostNodeMonitorWithBodyWithResponse request with arbitrary body returning *PostNodeMonitorResponse
func (c *ClientWithResponses) PostNodeMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNodeMonitorResponse, error) {
	rsp, err := c.PostNodeMonitorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodeMonitorResponse(rsp)
}

func (c *ClientWithResponses) PostNodeMonitorWithResponse(ctx context.Context, body PostNodeMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNodeMonitorResponse, error) {
	rsp, err := c.PostNodeMonitor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNodeMonitorResponse(rsp)
}

// GetNodesInfoWithResponse request returning *GetNodesInfoResponse
func (c *ClientWithResponses) GetNodesInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNodesInfoResponse, error) {
	rsp, err := c.GetNodesInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodesInfoResponse(rsp)
}

// PostObjectAbortWithBodyWithResponse request with arbitrary body returning *PostObjectAbortResponse
func (c *ClientWithResponses) PostObjectAbortWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectAbortResponse, error) {
	rsp, err := c.PostObjectAbortWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectAbortResponse(rsp)
}

func (c *ClientWithResponses) PostObjectAbortWithResponse(ctx context.Context, body PostObjectAbortJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectAbortResponse, error) {
	rsp, err := c.PostObjectAbort(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectAbortResponse(rsp)
}

// PostObjectClearWithBodyWithResponse request with arbitrary body returning *PostObjectClearResponse
func (c *ClientWithResponses) PostObjectClearWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectClearResponse, error) {
	rsp, err := c.PostObjectClearWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectClearResponse(rsp)
}

func (c *ClientWithResponses) PostObjectClearWithResponse(ctx context.Context, body PostObjectClearJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectClearResponse, error) {
	rsp, err := c.PostObjectClear(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectClearResponse(rsp)
}

// GetObjectConfigWithResponse request returning *GetObjectConfigResponse
func (c *ClientWithResponses) GetObjectConfigWithResponse(ctx context.Context, params *GetObjectConfigParams, reqEditors ...RequestEditorFn) (*GetObjectConfigResponse, error) {
	rsp, err := c.GetObjectConfig(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectConfigResponse(rsp)
}

// GetObjectFileWithResponse request returning *GetObjectFileResponse
func (c *ClientWithResponses) GetObjectFileWithResponse(ctx context.Context, params *GetObjectFileParams, reqEditors ...RequestEditorFn) (*GetObjectFileResponse, error) {
	rsp, err := c.GetObjectFile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectFileResponse(rsp)
}

// PostObjectMonitorWithBodyWithResponse request with arbitrary body returning *PostObjectMonitorResponse
func (c *ClientWithResponses) PostObjectMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectMonitorResponse, error) {
	rsp, err := c.PostObjectMonitorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectMonitorResponse(rsp)
}

func (c *ClientWithResponses) PostObjectMonitorWithResponse(ctx context.Context, body PostObjectMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectMonitorResponse, error) {
	rsp, err := c.PostObjectMonitor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectMonitorResponse(rsp)
}

// PostObjectProgressWithBodyWithResponse request with arbitrary body returning *PostObjectProgressResponse
func (c *ClientWithResponses) PostObjectProgressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectProgressResponse, error) {
	rsp, err := c.PostObjectProgressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectProgressResponse(rsp)
}

func (c *ClientWithResponses) PostObjectProgressWithResponse(ctx context.Context, body PostObjectProgressJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectProgressResponse, error) {
	rsp, err := c.PostObjectProgress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectProgressResponse(rsp)
}

// GetObjectSelectorWithResponse request returning *GetObjectSelectorResponse
func (c *ClientWithResponses) GetObjectSelectorWithResponse(ctx context.Context, params *GetObjectSelectorParams, reqEditors ...RequestEditorFn) (*GetObjectSelectorResponse, error) {
	rsp, err := c.GetObjectSelector(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectSelectorResponse(rsp)
}

// PostObjectSwitchToWithBodyWithResponse request with arbitrary body returning *PostObjectSwitchToResponse
func (c *ClientWithResponses) PostObjectSwitchToWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectSwitchToResponse, error) {
	rsp, err := c.PostObjectSwitchToWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectSwitchToResponse(rsp)
}

func (c *ClientWithResponses) PostObjectSwitchToWithResponse(ctx context.Context, body PostObjectSwitchToJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectSwitchToResponse, error) {
	rsp, err := c.PostObjectSwitchTo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectSwitchToResponse(rsp)
}

// GetSwaggerWithResponse request returning *GetSwaggerResponse
func (c *ClientWithResponses) GetSwaggerWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSwaggerResponse, error) {
	rsp, err := c.GetSwagger(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSwaggerResponse(rsp)
}

// GetRelayMessageWithResponse request returning *GetRelayMessageResponse
func (c *ClientWithResponses) GetRelayMessageWithResponse(ctx context.Context, params *GetRelayMessageParams, reqEditors ...RequestEditorFn) (*GetRelayMessageResponse, error) {
	rsp, err := c.GetRelayMessage(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRelayMessageResponse(rsp)
}

// PostRelayMessageWithBodyWithResponse request with arbitrary body returning *PostRelayMessageResponse
func (c *ClientWithResponses) PostRelayMessageWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelayMessageResponse, error) {
	rsp, err := c.PostRelayMessageWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelayMessageResponse(rsp)
}

func (c *ClientWithResponses) PostRelayMessageWithResponse(ctx context.Context, body PostRelayMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelayMessageResponse, error) {
	rsp, err := c.PostRelayMessage(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelayMessageResponse(rsp)
}

// ParsePostAuthTokenResponse parses an HTTP response from a PostAuthTokenWithResponse call
func ParsePostAuthTokenResponse(rsp *http.Response) (*PostAuthTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponsePostAuthToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDaemonDNSDumpResponse parses an HTTP response from a GetDaemonDNSDumpWithResponse call
func ParseGetDaemonDNSDumpResponse(rsp *http.Response) (*GetDaemonDNSDumpResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDaemonDNSDumpResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DnsZone
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDaemonEventsResponse parses an HTTP response from a GetDaemonEventsWithResponse call
func ParseGetDaemonEventsResponse(rsp *http.Response) (*GetDaemonEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDaemonEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDaemonJoinResponse parses an HTTP response from a PostDaemonJoinWithResponse call
func ParsePostDaemonJoinResponse(rsp *http.Response) (*PostDaemonJoinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDaemonJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDaemonLeaveResponse parses an HTTP response from a PostDaemonLeaveWithResponse call
func ParsePostDaemonLeaveResponse(rsp *http.Response) (*PostDaemonLeaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDaemonLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostDaemonLogsControlResponse parses an HTTP response from a PostDaemonLogsControlWithResponse call
func ParsePostDaemonLogsControlResponse(rsp *http.Response) (*PostDaemonLogsControlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDaemonLogsControlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDaemonRunningResponse parses an HTTP response from a GetDaemonRunningWithResponse call
func ParseGetDaemonRunningResponse(rsp *http.Response) (*GetDaemonRunningResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDaemonRunningResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseMuxBool
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDaemonStatusResponse parses an HTTP response from a GetDaemonStatusWithResponse call
func ParseGetDaemonStatusResponse(rsp *http.Response) (*GetDaemonStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDaemonStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseDaemonStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDaemonStopResponse parses an HTTP response from a PostDaemonStopWithResponse call
func ParsePostDaemonStopResponse(rsp *http.Response) (*PostDaemonStopResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDaemonStopResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDaemonSubActionResponse parses an HTTP response from a PostDaemonSubActionWithResponse call
func ParsePostDaemonSubActionResponse(rsp *http.Response) (*PostDaemonSubActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDaemonSubActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInstanceStatusResponse parses an HTTP response from a PostInstanceStatusWithResponse call
func ParsePostInstanceStatusResponse(rsp *http.Response) (*PostInstanceStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstanceStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNodeClearResponse parses an HTTP response from a PostNodeClearWithResponse call
func ParsePostNodeClearResponse(rsp *http.Response) (*PostNodeClearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNodeClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNodeDrbdAllocationResponse parses an HTTP response from a GetNodeDrbdAllocationWithResponse call
func ParseGetNodeDrbdAllocationResponse(rsp *http.Response) (*GetNodeDrbdAllocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeDrbdAllocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DrbdAllocation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNodeDrbdConfigResponse parses an HTTP response from a GetNodeDrbdConfigWithResponse call
func ParseGetNodeDrbdConfigResponse(rsp *http.Response) (*GetNodeDrbdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeDrbdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseGetNodeDrbdConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNodeDrbdConfigResponse parses an HTTP response from a PostNodeDrbdConfigWithResponse call
func ParsePostNodeDrbdConfigResponse(rsp *http.Response) (*PostNodeDrbdConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNodeDrbdConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostNodeMonitorResponse parses an HTTP response from a PostNodeMonitorWithResponse call
func ParsePostNodeMonitorResponse(rsp *http.Response) (*PostNodeMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNodeMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResponseInfoStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNodesInfoResponse parses an HTTP response from a GetNodesInfoWithResponse call
func ParseGetNodesInfoResponse(rsp *http.Response) (*GetNodesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NodesInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObjectAbortResponse parses an HTTP response from a PostObjectAbortWithResponse call
func ParsePostObjectAbortResponse(rsp *http.Response) (*PostObjectAbortResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectAbortResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectClearResponse parses an HTTP response from a PostObjectClearWithResponse call
func ParsePostObjectClearResponse(rsp *http.Response) (*PostObjectClearResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectClearResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectConfigResponse parses an HTTP response from a GetObjectConfigWithResponse call
func ParseGetObjectConfigResponse(rsp *http.Response) (*GetObjectConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectConfig
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectFileResponse parses an HTTP response from a GetObjectFileWithResponse call
func ParseGetObjectFileResponse(rsp *http.Response) (*GetObjectFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectFile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObjectMonitorResponse parses an HTTP response from a PostObjectMonitorWithResponse call
func ParsePostObjectMonitorResponse(rsp *http.Response) (*PostObjectMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostObjectProgressResponse parses an HTTP response from a PostObjectProgressWithResponse call
func ParsePostObjectProgressResponse(rsp *http.Response) (*PostObjectProgressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectProgressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectSelectorResponse parses an HTTP response from a GetObjectSelectorWithResponse call
func ParseGetObjectSelectorResponse(rsp *http.Response) (*GetObjectSelectorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectSelectorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ObjectSelector
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObjectSwitchToResponse parses an HTTP response from a PostObjectSwitchToWithResponse call
func ParsePostObjectSwitchToResponse(rsp *http.Response) (*PostObjectSwitchToResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectSwitchToResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSwaggerResponse parses an HTTP response from a GetSwaggerWithResponse call
func ParseGetSwaggerResponse(rsp *http.Response) (*GetSwaggerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSwaggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRelayMessageResponse parses an HTTP response from a GetRelayMessageWithResponse call
func ParseGetRelayMessageResponse(rsp *http.Response) (*GetRelayMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRelayMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RelayMessages
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRelayMessageResponse parses an HTTP response from a PostRelayMessageWithResponse call
func ParsePostRelayMessageResponse(rsp *http.Response) (*PostRelayMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRelayMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (POST /node/monitor)
	PostNodeMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostNodeMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostNodeMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/monitor", wrapper.PostNodeMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zy8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

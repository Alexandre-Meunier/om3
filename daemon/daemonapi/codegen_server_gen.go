// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/token)
	PostAuthToken(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (GET /daemon/status)
	GetDaemonStatus(w http.ResponseWriter, r *http.Request, params GetDaemonStatusParams)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (POST /node/monitor)
	PostNodeMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// PostAuthToken operation middleware
func (siw *ServerInterfaceWrapper) PostAuthToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetDaemonStatus operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDaemonStatusParams

	// ------------- Optional query parameter "namespace" -------------
	if paramValue := r.URL.Query().Get("namespace"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "namespace", r.URL.Query(), &params.Namespace)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "namespace", Err: err})
		return
	}

	// ------------- Optional query parameter "relatives" -------------
	if paramValue := r.URL.Query().Get("relatives"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "relatives", r.URL.Query(), &params.Relatives)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "relatives", Err: err})
		return
	}

	// ------------- Optional query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonStatus(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostNodeMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostNodeMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNodeMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/token", wrapper.PostAuthToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/status", wrapper.GetDaemonStatus)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/node/monitor", wrapper.PostNodeMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

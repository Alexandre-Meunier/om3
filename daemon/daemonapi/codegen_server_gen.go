// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"N9RcHx+O/w4AAP//2zyBKvUnAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XYCstHXrq+ur99nh/vCfAAAA//+UQDla1ikAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

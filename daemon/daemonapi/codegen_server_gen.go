// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /daemon/running)
	GetDaemonRunning(w http.ResponseWriter, r *http.Request)

	// (POST /daemon/stop)
	PostDaemonStop(w http.ResponseWriter, r *http.Request)

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)

	// (GET /public/openapi)
	GetSwagger(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetDaemonRunning operation middleware
func (siw *ServerInterfaceWrapper) GetDaemonRunning(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDaemonRunning(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostDaemonStop operation middleware
func (siw *ServerInterfaceWrapper) PostDaemonStop(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDaemonStop(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BasicAuthScopes, []string{""})

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetSwagger operation middleware
func (siw *ServerInterfaceWrapper) GetSwagger(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSwagger(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/daemon/running", wrapper.GetDaemonRunning)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/daemon/stop", wrapper.PostDaemonStop)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/public/openapi", wrapper.GetSwagger)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RaX2/kthH/KoRaoAmg27V9dwG6T72kaXFA0zvEebONw6w4q2VCkTqSWnsb7HcvhhQl",
	"rUR51z07KJKXu7U4nP8z5G+kX7NCV7VWqJzNVr9mNRio0KHxf31u0Ow/rH/Gwn0Et6VHHG1hRO2EVtkq",
	"036N1bSYZ4Ie+T1ZnimoMFtl7ZLBz40wyLOVMw3mmS22WAExdPua6KwzQpXZ4ZAPpV6jxMJpMyvZRoK0",
	"9MHy+Roc4qL3AdR1gijP0JigV210jcYJ9OSF5jjV9nsiZn4tzzbaVOCyVSaUe32V5ZG3UA5LNMS8Qmuh",
	"nGUUl/OE93o7b7JWYCS/O5CXrANV4LUD19ip/q25fza4yVbZn5Z9eixbpyyJ5JBnsAMhT9HaIOaQZ8VW",
	"SG5QndpBCfMjSvAG0z6trDMg2gRtDV5rLRECgW2qZIS4qdM7UO2SGzYSHz5V8DBYHMQkrAr1yKoDU6Kb",
	"ITD6P8H6Lv4cHL5yokoEMs9+EYqf8pWnOeSZ9ukBT4iGNsUWya8OT20aktLOHRqQTxBVg4nd5SlxryUU",
	"WKFyJzd2hLTLoEWzQx5KZwONdNlqA9JiPiqlSMqEZdQSmNgwtxWWBdXZFixT2rE1omJNTcHijDfInGbA",
	"btUWwbg1gmNc3ysKIyvIOcjZes+AVZSzqKjYWI1GaL64VfdbVMxtMbHKUHGb+8VWA7vVjeRsjaxRxRZU",
	"iTxntwoUZ53y90JKorDoSDFv6eJW9Rk1yPvaCG2E25/0aKTze/ROWKEV8tPbelLfiKxuTBHainBYnUyB",
	"uOP7h1pb5NddCrWmgDHglTKNUlQmQ8aTAhpvsgVITNemlbDDJ2doiNKn0ugmfUTYZm0xZP5x6nWuYYPm",
	"m/e2HLdkOpOlRJlK6WmQjeDpY3V4MHQsA/1dxygcqyn3OV1rqcuTydPRHfKsrZpzm95IyXDAdJ2zbYl9",
	"BzpOzl5ayprYTScxUprje7XRU7dLWKNMBC88911ji0wK65jeMOLDwtJiGMrHXEV7/kVbUv6mxXCLGSsQ",
	"V6IK/rfehN+kxv0WDQbtgq6+Y4DbWgaGulQlVMk2RleL1MnjKadiA4OU2U4z67SBEplXn1lQQd7ZrrCg",
	"/A1z4ohRTrRBGbgn6puKeu/gSXRnXDtwqxflnZv00g5kk+DgHx+z8I8WJ9O9tSbwnbPGxlw9O8H8hkR+",
	"Bb7fabUR5dQ9HNzwbtwrUfnSPb+gJwzCr3+I0IvTUjve671LXo6eqsXQz15IZHE3q2EEPBPZeoJMzorF",
	"gGsqGsf3sXGbR0V33JtsC1nePrIOjBvof1y/3Tk1VG8WuzFtGCgWsUF49hX9+zdKoa9TIRhbcHRf6/TP",
	"lFYUkrTouIXVWoqCcFs0VGrgDHZlW+mWacPR+L88P1to4/+vDQI1f7sVmxl3aOsCmny31salztdkpCdH",
	"ptsm06Xn/51EMC/I/wethEuBzlLqNchP+FDTnlTSPpsOc7ixnisX2214rDpGsDSpWMcrqeHgbttl39uL",
	"ceaRPN5IOv/iDjrGQLE2J7sa0IoBE876Iy4J0kdX45EgNDtRYD5gaFi897HBVn/Zxz712/KuxIO/1Kgl",
	"ZDnBk1Rqpy/M07YqLKxl4rDaEqr2J1WnmSiVNmgZSBk0Y86AsoJ2MCjoP5sEF6gKqKcihOKiAIckBtxI",
	"FoEsxWVATLTkmdhGeqwFJaVIRDxBMc5aJtt9TR622jCJO5QzkEe0x+WxUr/g/lU4qGsQxoZwcEoKCq9B",
	"68LvcLqQ5U6zQktq+eyWvIGv7gVHBmvduIAao1VDRfr0lPEWMomh1Mc4ZnQJJduS+wYjoseLOrAYTIHO",
	"uOxXfac59pxDKUPGcMBKKwLNwkWk6owoSzQEfgODNmNYB3tv1TD6BK+beiZ0w6HGKKd6b0eoDGVpsPRp",
	"I5TT7EPACL76EDjV+DuCE305ho2LW+VHapYJxaLEnjvX6i+OLrc1g7lymAXbZwPnKO5j3NIjX8pFMDMj",
	"pRbqncP6PW97seLr/TwgjYEEeQ976ycPdc5wh4rBxvnIemc8zRXnHQH9xCjg5kTyjcBOoDsuP0orsFaU",
	"1FqdTt5coLRPGx2Ev08Wmq/xEJbO6HZzqugGsUkpMZcVkx7xpMtwUAyfNMsZ2RkYzFhUa2Xxh+bhW63l",
	"/AV/ptuNUMfR6cJrLZQ7HYWOMg/szml3qJzZz/Ef5u+4BieyOz6DBJhVI7rrJ3yYEdyi4omjhBJOQNuh",
	"z8DV7zt6n/9xSn3Gzp8C8djSXoGOX8rCifjE/aBdiph5q61jlg7XOEVgMaSLMPI5G8UDu9dGcn9SN0p8",
	"bvCYHxMclRMbgYZY4wNUtfTx/awWVxcXb15dXiwKXS2adaNcs7q4XOE3a/4GXq/fvn0zD4omfWtfdyOB",
	"TjY9HEm1hRXngejj4EwF+udR5Gg283/h2r++urz0rtU1KrsrFtbsVhx3V+py0eq7CFYsLp/uaHhOV4+L",
	"f6DEYCTaI94NCKl3HqwmUW+3q0e7gy0biQ8JGEuKYNEQXrmmAg0xWoMVxbsmdAhfuL5t0tPeuK1zdXir",
	"GS/DTjjvhdb3DGryxQ6NDYq+XnyzuApXMFS0SI8uFhfZYDa4DPe/5WAU36YiJZG/NNO5lv0T3d895Y8t",
	"Yd/2PJ+ri4vw2lS5dnYAdS0JMgitlj/bMMLoX9aeuOwcHT/e6BEsa4oCrT1yaLa6OXLlzd3hjtajiXTj",
	"8S1Y24SBH7VtLbwmut/APH9cfKltfqqyjBkxF7p/dyPHF7Srn2t+qVGhwpbQzXlmIzYcCIWTDa37VvP9",
	"s1k1HjslbPMLrB/90UW6aIxB5eSetZUVBhHhQwYi0Jt2VOGH68dfNRzSUZrxaN43rWeyOXwTkbC0UWE2",
	"hZxFmvPDWXRjtRPhDPO3lw5nkJIw0i/YYKBlX220Ye2JkzOP4hj1eeRfE9b074BbkOwv1NbPof7Yge5e",
	"Rsz1ow/Dlxb50ddKN2mNe5Ll+GumQz72GO5ANmEal/qaaLA8+XqowypTrqKq0VitPGSme0lg42FzN15M",
	"yRtszB77YOnuBZvz0WuiZ+rPm/blz+NR9q+IvjjGL+8br+czeWYwdzvV7OLLgJdud1FOwsLqSIXfe3ey",
	"gzd+j2fudf/V4f+cvR2P3yCDe1nPk8U9ZDqVxNdxRvKyOdy9VZqYRzTx1Y8dKvN7zOY4+rzxAyyjQGYh",
	"bnWzlqJYdnBvPsGv76Es0XwpHBih7MfTLiodtCSVvZ1mF6uqMbLFuXa1XEpdgNxq61aXV5dvs8Pd4b8B",
	"AAD//984v6nlLAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

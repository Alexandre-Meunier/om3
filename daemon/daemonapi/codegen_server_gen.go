// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"18eH478DAAD//7p/Nb/1JwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

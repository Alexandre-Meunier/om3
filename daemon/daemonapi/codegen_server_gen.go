// Package daemonapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package daemonapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /nodes/info)
	GetNodesInfo(w http.ResponseWriter, r *http.Request)

	// (POST /object/abort)
	PostObjectAbort(w http.ResponseWriter, r *http.Request)

	// (POST /object/clear)
	PostObjectClear(w http.ResponseWriter, r *http.Request)

	// (GET /object/config)
	GetObjectConfig(w http.ResponseWriter, r *http.Request, params GetObjectConfigParams)

	// (GET /object/file)
	GetObjectFile(w http.ResponseWriter, r *http.Request, params GetObjectFileParams)

	// (POST /object/monitor)
	PostObjectMonitor(w http.ResponseWriter, r *http.Request)

	// (GET /object/selector)
	GetObjectSelector(w http.ResponseWriter, r *http.Request, params GetObjectSelectorParams)

	// (POST /object/status)
	PostObjectStatus(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// GetNodesInfo operation middleware
func (siw *ServerInterfaceWrapper) GetNodesInfo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNodesInfo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectAbort operation middleware
func (siw *ServerInterfaceWrapper) PostObjectAbort(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectAbort(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectClear operation middleware
func (siw *ServerInterfaceWrapper) PostObjectClear(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectClear(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectConfig operation middleware
func (siw *ServerInterfaceWrapper) GetObjectConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectConfigParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	// ------------- Optional query parameter "evaluate" -------------
	if paramValue := r.URL.Query().Get("evaluate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "evaluate", r.URL.Query(), &params.Evaluate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "evaluate", Err: err})
		return
	}

	// ------------- Optional query parameter "impersonate" -------------
	if paramValue := r.URL.Query().Get("impersonate"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "impersonate", r.URL.Query(), &params.Impersonate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "impersonate", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectConfig(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectFile operation middleware
func (siw *ServerInterfaceWrapper) GetObjectFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectFileParams

	// ------------- Required query parameter "path" -------------
	if paramValue := r.URL.Query().Get("path"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "path"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "path", r.URL.Query(), &params.Path)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "path", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectFile(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectMonitor operation middleware
func (siw *ServerInterfaceWrapper) PostObjectMonitor(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectMonitor(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetObjectSelector operation middleware
func (siw *ServerInterfaceWrapper) GetObjectSelector(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectSelectorParams

	// ------------- Required query parameter "selector" -------------
	if paramValue := r.URL.Query().Get("selector"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "selector"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "selector", r.URL.Query(), &params.Selector)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "selector", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectSelector(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostObjectStatus operation middleware
func (siw *ServerInterfaceWrapper) PostObjectStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjectStatus(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/nodes/info", wrapper.GetNodesInfo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/abort", wrapper.PostObjectAbort)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/clear", wrapper.PostObjectClear)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/config", wrapper.GetObjectConfig)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/file", wrapper.GetObjectFile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/monitor", wrapper.PostObjectMonitor)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/object/selector", wrapper.GetObjectSelector)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/object/status", wrapper.PostObjectStatus)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HP4dAAD//6K+7671JwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

package resdiskzpool

import (
	"opensvc.com/opensvc/core/driver"
	"opensvc.com/opensvc/core/keywords"
	"opensvc.com/opensvc/core/manifest"
	"opensvc.com/opensvc/drivers/resdisk"
	"opensvc.com/opensvc/util/converters"
)

var (
	drvID = driver.NewID(driver.GroupDisk, "zpool")
)

func init() {
	driver.Register(drvID, New)
}

// Manifest exposes to the core the input expected by the driver.
func (t T) Manifest() *manifest.T {
	m := manifest.New(drvID, t)
	m.AddKeyword(resdisk.BaseKeywords...)
	m.AddKeyword([]keywords.Keyword{
		{
			Option:   "name",
			Attr:     "Name",
			Required: true,
			Scopable: true,
			Text:     "The name of the zfs pool.",
			Example:  "tank",
			Aliases:  []string{"poolname"},
		},
		{
			Option:    "multihost",
			Attr:      "Multihost",
			Scopable:  true,
			Converter: converters.Tristate,
			Text:      "If set to ``true``, sets zfs property ``multihost=on`` on start if not already set. This requires all nodes to be booted with a /etc/hostid installed, preferrably generated by the zgenhostid command. If set to ``false``, sets the zfs property ``multihost=off``. If left empty, the current multihost property is left unchanged.",
			Example:   "yes",
		},
		{
			Option:       "vdev",
			Attr:         "VDev",
			Scopable:     true,
			Converter:    converters.List,
			Provisioning: true,
			Text:         "The vdev list, including optional parity keywords, as would be passed to zpool create.",
			Example:      "/dev/mapper/23 /dev/mapper/24",
		},
		{
			Option:       "create_options",
			Attr:         "CreateOptions",
			Converter:    converters.Shlex,
			Scopable:     true,
			Provisioning: true,
			Text:         "The zone name the zpool refers to. If set, the zpool is activated in the zone context.",
			Example:      "-O dedup=on",
		},
		{
			Option:   "zone",
			Attr:     "Zone",
			Scopable: true,
			Text:     "The zone name the zpool refers to. If set, the zpool is activated in the zone context.",
		},
	}...)
	return m
}
